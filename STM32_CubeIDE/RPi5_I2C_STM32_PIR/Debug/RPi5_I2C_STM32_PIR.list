
RPi5_I2C_STM32_PIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006020  08006020  00007020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c0  080060c0  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080060c0  080060c0  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c8  080060c8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c8  080060c8  000070c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060cc  080060cc  000070cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080060d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000068  08006138  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08006138  000082d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4c9  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b95  00000000  00000000  00013561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  000150f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000816  00000000  00000000  00015b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a4f  00000000  00000000  0001636e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d216  00000000  00000000  0002cdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a158  00000000  00000000  00039fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c412b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003294  00000000  00000000  000c4170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000c7404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006008 	.word	0x08006008

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006008 	.word	0x08006008

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
static void MX_I2C1_Init(void);
static void MX_I2C2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
/* simple printf retarget to USART2 */
int __io_putchar(int ch) { HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY); return ch; }
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <__io_putchar+0x20>)
 80005be:	f004 f9db 	bl	8004978 <HAL_UART_Transmit>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000012c 	.word	0x2000012c

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fbed 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f88b 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f977 	bl	80008d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005e2:	f000 f8ef 	bl	80007c4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005e6:	f000 f91b 	bl	8000820 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005ea:	f000 f947 	bl	800087c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Focus Monitor: started\r\n");
 80005ee:	4839      	ldr	r0, [pc, #228]	@ (80006d4 <main+0x104>)
 80005f0:	f004 fea8 	bl	8005344 <puts>

    /* Prepare initial tx buffer */
    tx_buffer[0] = 0;
 80005f4:	4b38      	ldr	r3, [pc, #224]	@ (80006d8 <main+0x108>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = 0;
 80005fa:	4b37      	ldr	r3, [pc, #220]	@ (80006d8 <main+0x108>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = 0;
 8000600:	4b35      	ldr	r3, [pc, #212]	@ (80006d8 <main+0x108>)
 8000602:	2200      	movs	r2, #0
 8000604:	709a      	strb	r2, [r3, #2]

    /* Ensure slave transmit IT is primed (non-blocking). We'll re-arm when data updates. */
    HAL_I2C_Slave_Transmit_IT(&hi2c1, tx_buffer, 3);
 8000606:	2203      	movs	r2, #3
 8000608:	4933      	ldr	r1, [pc, #204]	@ (80006d8 <main+0x108>)
 800060a:	4834      	ldr	r0, [pc, #208]	@ (80006dc <main+0x10c>)
 800060c:	f001 fbd0 	bl	8001db0 <HAL_I2C_Slave_Transmit_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* ---------- 1) Read PIR (PA0) ---------- */
	      uint8_t motion = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); // 0 or 1
 8000610:	2101      	movs	r1, #1
 8000612:	4833      	ldr	r0, [pc, #204]	@ (80006e0 <main+0x110>)
 8000614:	f000 ff2a 	bl	800146c <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	71fb      	strb	r3, [r7, #7]
	      tx_buffer[0] = motion;
 800061c:	4a2e      	ldr	r2, [pc, #184]	@ (80006d8 <main+0x108>)
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	7013      	strb	r3, [r2, #0]

	      /* ---------- 2) Read BH1750 ---------- */
	      // Command: 0x10 = Continuously H-Resolution Mode (or use one-time 0x20)
	      uint8_t cmd = 0x10;
 8000622:	2310      	movs	r3, #16
 8000624:	70fb      	strb	r3, [r7, #3]
	      if (HAL_I2C_Master_Transmit(&hi2c2, BH1750_ADDR, &cmd, 1, 100) == HAL_OK)
 8000626:	1cfa      	adds	r2, r7, #3
 8000628:	2364      	movs	r3, #100	@ 0x64
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2301      	movs	r3, #1
 800062e:	2146      	movs	r1, #70	@ 0x46
 8000630:	482c      	ldr	r0, [pc, #176]	@ (80006e4 <main+0x114>)
 8000632:	f001 f88d 	bl	8001750 <HAL_I2C_Master_Transmit>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d11d      	bne.n	8000678 <main+0xa8>
	      {
	        HAL_Delay(180); // measurement time for high res
 800063c:	20b4      	movs	r0, #180	@ 0xb4
 800063e:	f000 fc2b 	bl	8000e98 <HAL_Delay>
	        if (HAL_I2C_Master_Receive(&hi2c2, BH1750_ADDR, bh1750_raw, 2, 100) == HAL_OK)
 8000642:	2364      	movs	r3, #100	@ 0x64
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2302      	movs	r3, #2
 8000648:	4a27      	ldr	r2, [pc, #156]	@ (80006e8 <main+0x118>)
 800064a:	2146      	movs	r1, #70	@ 0x46
 800064c:	4825      	ldr	r0, [pc, #148]	@ (80006e4 <main+0x114>)
 800064e:	f001 f97d 	bl	800194c <HAL_I2C_Master_Receive>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d108      	bne.n	800066a <main+0x9a>
	        {
	          tx_buffer[1] = bh1750_raw[0];
 8000658:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <main+0x118>)
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <main+0x108>)
 800065e:	705a      	strb	r2, [r3, #1]
	          tx_buffer[2] = bh1750_raw[1];
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <main+0x118>)
 8000662:	785a      	ldrb	r2, [r3, #1]
 8000664:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <main+0x108>)
 8000666:	709a      	strb	r2, [r3, #2]
 8000668:	e00c      	b.n	8000684 <main+0xb4>
	        }
	        else
	        {
	          // read failed
	          tx_buffer[1] = 0;
 800066a:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <main+0x108>)
 800066c:	2200      	movs	r2, #0
 800066e:	705a      	strb	r2, [r3, #1]
	          tx_buffer[2] = 0;
 8000670:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <main+0x108>)
 8000672:	2200      	movs	r2, #0
 8000674:	709a      	strb	r2, [r3, #2]
 8000676:	e005      	b.n	8000684 <main+0xb4>
	        }
	      }
	      else
	      {
	        // write cmd failed
	        tx_buffer[1] = 0;
 8000678:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <main+0x108>)
 800067a:	2200      	movs	r2, #0
 800067c:	705a      	strb	r2, [r3, #1]
	        tx_buffer[2] = 0;
 800067e:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <main+0x108>)
 8000680:	2200      	movs	r2, #0
 8000682:	709a      	strb	r2, [r3, #2]
	      }

	      /* Debug print */
	      uint16_t lux = ((uint16_t)tx_buffer[1] << 8) | tx_buffer[2];
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <main+0x108>)
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	b21b      	sxth	r3, r3
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <main+0x108>)
 8000690:	789b      	ldrb	r3, [r3, #2]
 8000692:	b21b      	sxth	r3, r3
 8000694:	4313      	orrs	r3, r2
 8000696:	b21b      	sxth	r3, r3
 8000698:	80bb      	strh	r3, [r7, #4]
	      // BH1750 raw -> lux conversion: value/1.2 (use float if needed). For console, show raw.
	      printf("Motion=%d, BH1750_raw=%u\r\n", motion, lux);
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	88ba      	ldrh	r2, [r7, #4]
 800069e:	4619      	mov	r1, r3
 80006a0:	4812      	ldr	r0, [pc, #72]	@ (80006ec <main+0x11c>)
 80006a2:	f004 fde7 	bl	8005274 <iprintf>

	      /* (Re)arm slave transmit with updated buffer */
	          // Only arm transmit if I2C is ready; otherwise skip and try next loop
	          if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 80006a6:	480d      	ldr	r0, [pc, #52]	@ (80006dc <main+0x10c>)
 80006a8:	f001 fe72 	bl	8002390 <HAL_I2C_GetState>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b20      	cmp	r3, #32
 80006b0:	d10a      	bne.n	80006c8 <main+0xf8>
	          {
	              // Non-blocking transmit — STM32 will send buffer when Pi reads
	              if (HAL_I2C_Slave_Transmit_IT(&hi2c1, tx_buffer, 3) != HAL_OK)
 80006b2:	2203      	movs	r2, #3
 80006b4:	4908      	ldr	r1, [pc, #32]	@ (80006d8 <main+0x108>)
 80006b6:	4809      	ldr	r0, [pc, #36]	@ (80006dc <main+0x10c>)
 80006b8:	f001 fb7a 	bl	8001db0 <HAL_I2C_Slave_Transmit_IT>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <main+0xf8>
	              {
	                  // optionally log error via UART
	                  printf("I2C Slave Transmit_IT error\r\n");
 80006c2:	480b      	ldr	r0, [pc, #44]	@ (80006f0 <main+0x120>)
 80006c4:	f004 fe3e 	bl	8005344 <puts>
	          else
	          {
	              // Optional: print state for debugging (comment out if noisy)
	              // printf("I2C busy: state=%lu\r\n", HAL_I2C_GetState(&hi2c1));
	          }
	      HAL_Delay(800); // sampling interval ~ 1s
 80006c8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80006cc:	f000 fbe4 	bl	8000e98 <HAL_Delay>
  {
 80006d0:	e79e      	b.n	8000610 <main+0x40>
 80006d2:	bf00      	nop
 80006d4:	08006020 	.word	0x08006020
 80006d8:	20000174 	.word	0x20000174
 80006dc:	20000084 	.word	0x20000084
 80006e0:	40020000 	.word	0x40020000
 80006e4:	200000d8 	.word	0x200000d8
 80006e8:	20000178 	.word	0x20000178
 80006ec:	08006038 	.word	0x08006038
 80006f0:	08006054 	.word	0x08006054

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	@ 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	@ 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fefe 	bl	8005504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <SystemClock_Config+0xc8>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	4a26      	ldr	r2, [pc, #152]	@ (80007bc <SystemClock_Config+0xc8>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	@ 0x40
 8000728:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <SystemClock_Config+0xc8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <SystemClock_Config+0xcc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <SystemClock_Config+0xcc>)
 800073e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <SystemClock_Config+0xcc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000764:	2308      	movs	r3, #8
 8000766:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000768:	2354      	movs	r3, #84	@ 0x54
 800076a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fc15 	bl	8003fa8 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000784:	f000 f8e0 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2102      	movs	r1, #2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 fe77 	bl	8004498 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007b0:	f000 f8ca 	bl	8000948 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3750      	adds	r7, #80	@ 0x50
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007ca:	4a13      	ldr	r2, [pc, #76]	@ (8000818 <MX_I2C1_Init+0x54>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007d0:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_I2C1_Init+0x58>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = STM32_SLAVE_ADDR;;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007dc:	224e      	movs	r2, #78	@ 0x4e
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	@ (8000814 <MX_I2C1_Init+0x50>)
 8000802:	f000 fe4b 	bl	800149c <HAL_I2C_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800080c:	f000 f89c 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000084 	.word	0x20000084
 8000818:	40005400 	.word	0x40005400
 800081c:	000186a0 	.word	0x000186a0

08000820 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2C2_Init+0x50>)
 8000826:	4a13      	ldr	r2, [pc, #76]	@ (8000874 <MX_I2C2_Init+0x54>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_I2C2_Init+0x50>)
 800082c:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <MX_I2C2_Init+0x58>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_I2C2_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_I2C2_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_I2C2_Init+0x50>)
 800083e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000842:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <MX_I2C2_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_I2C2_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <MX_I2C2_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_I2C2_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_I2C2_Init+0x50>)
 800085e:	f000 fe1d 	bl	800149c <HAL_I2C_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000868:	f000 f86e 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000d8 	.word	0x200000d8
 8000874:	40005800 	.word	0x40005800
 8000878:	000186a0 	.word	0x000186a0

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <MX_USART1_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f004 f810 	bl	80048d8 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f843 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000012c 	.word	0x2000012c
 80008cc:	40011000 	.word	0x40011000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_GPIO_Init+0x70>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a14      	ldr	r2, [pc, #80]	@ (8000940 <MX_GPIO_Init+0x70>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_GPIO_Init+0x70>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_GPIO_Init+0x70>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <MX_GPIO_Init+0x70>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_GPIO_Init+0x70>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800091e:	2301      	movs	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	@ (8000944 <MX_GPIO_Init+0x74>)
 8000932:	f000 fc17 	bl	8001164 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <Error_Handler+0x8>

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000968:	6453      	str	r3, [r2, #68]	@ 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	@ 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000992:	2007      	movs	r0, #7
 8000994:	f000 fb74 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	@ 0x30
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a42      	ldr	r2, [pc, #264]	@ (8000acc <HAL_I2C_MspInit+0x128>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d13c      	bne.n	8000a40 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
 80009ca:	4b41      	ldr	r3, [pc, #260]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a40      	ldr	r2, [pc, #256]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	61bb      	str	r3, [r7, #24]
 80009e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e2:	23c0      	movs	r3, #192	@ 0xc0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e6:	2312      	movs	r3, #18
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f2:	2304      	movs	r3, #4
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4835      	ldr	r0, [pc, #212]	@ (8000ad4 <HAL_I2C_MspInit+0x130>)
 80009fe:	f000 fbb1 	bl	8001164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	4b32      	ldr	r3, [pc, #200]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a31      	ldr	r2, [pc, #196]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 8000a0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	201f      	movs	r0, #31
 8000a24:	f000 fb37 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a28:	201f      	movs	r0, #31
 8000a2a:	f000 fb50 	bl	80010ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2020      	movs	r0, #32
 8000a34:	f000 fb2f 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a38:	2020      	movs	r0, #32
 8000a3a:	f000 fb48 	bl	80010ce <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a3e:	e041      	b.n	8000ac4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a24      	ldr	r2, [pc, #144]	@ (8000ad8 <HAL_I2C_MspInit+0x134>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d13c      	bne.n	8000ac4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4814      	ldr	r0, [pc, #80]	@ (8000ad4 <HAL_I2C_MspInit+0x130>)
 8000a84:	f000 fb6e 	bl	8001164 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8c:	2312      	movs	r3, #18
 8000a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000a98:	2309      	movs	r3, #9
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <HAL_I2C_MspInit+0x130>)
 8000aa4:	f000 fb5e 	bl	8001164 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	4a07      	ldr	r2, [pc, #28]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 8000ab2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <HAL_I2C_MspInit+0x12c>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	@ 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40005800 	.word	0x40005800

08000adc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	@ (8000b60 <HAL_UART_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12c      	bne.n	8000b58 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a17      	ldr	r2, [pc, #92]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <HAL_UART_MspInit+0x8c>)
 8000b54:	f000 fb06 	bl	8001164 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	@ 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40011000 	.word	0x40011000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc2:	f000 f949 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <I2C1_EV_IRQHandler+0x10>)
 8000bd2:	f001 f95d 	bl	8001e90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000084 	.word	0x20000084

08000be0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <I2C1_ER_IRQHandler+0x10>)
 8000be6:	f001 fac4 	bl	8002172 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000084 	.word	0x20000084

08000bf4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e00a      	b.n	8000c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c06:	f3af 8000 	nop.w
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf0      	blt.n	8000c06 <_read+0x12>
  }

  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e009      	b.n	8000c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fcaf 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf1      	blt.n	8000c40 <_write+0x12>
  }
  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_close>:

int _close(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f004 fc4e 	bl	80055a0 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20020000 	.word	0x20020000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	2000017c 	.word	0x2000017c
 8000d38:	200002d0 	.word	0x200002d0

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d64:	f7ff ffea 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	@ (8000dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f004 fc0d 	bl	80055ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fc1d 	bl	80005d0 <main>
  bx  lr    
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000da4:	080060d0 	.word	0x080060d0
  ldr r2, =_sbss
 8000da8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dac:	200002d0 	.word	0x200002d0

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <HAL_Init+0x40>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <HAL_Init+0x40>)
 8000dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_Init+0x40>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f94f 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fdb4 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f967 	bl	80010ea <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f92f 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000180 	.word	0x20000180

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000180 	.word	0x20000180

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	@ (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	@ (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	@ (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	@ 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	@ (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff3e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff31 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d004      	beq.n	8001120 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2280      	movs	r2, #128	@ 0x80
 800111a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e00c      	b.n	800113a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2205      	movs	r2, #5
 8001124:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0201 	bic.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001154:	b2db      	uxtb	r3, r3
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	@ 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	e159      	b.n	8001434 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 8148 	bne.w	800142e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d005      	beq.n	80011b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d130      	bne.n	8001218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b03      	cmp	r3, #3
 8001222:	d017      	beq.n	8001254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d123      	bne.n	80012a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	220f      	movs	r2, #15
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	08da      	lsrs	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3208      	adds	r2, #8
 80012a2:	69b9      	ldr	r1, [r7, #24]
 80012a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0203 	and.w	r2, r3, #3
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a2 	beq.w	800142e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b57      	ldr	r3, [pc, #348]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a56      	ldr	r2, [pc, #344]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b54      	ldr	r3, [pc, #336]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001306:	4a52      	ldr	r2, [pc, #328]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a49      	ldr	r2, [pc, #292]	@ (8001454 <HAL_GPIO_Init+0x2f0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x202>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a48      	ldr	r2, [pc, #288]	@ (8001458 <HAL_GPIO_Init+0x2f4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x1fe>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a47      	ldr	r2, [pc, #284]	@ (800145c <HAL_GPIO_Init+0x2f8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x1fa>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a46      	ldr	r2, [pc, #280]	@ (8001460 <HAL_GPIO_Init+0x2fc>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x1f6>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a45      	ldr	r2, [pc, #276]	@ (8001464 <HAL_GPIO_Init+0x300>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x1f2>
 8001352:	2304      	movs	r3, #4
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001356:	2307      	movs	r3, #7
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x204>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x204>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001366:	2300      	movs	r3, #0
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001378:	4935      	ldr	r1, [pc, #212]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001386:	4b38      	ldr	r3, [pc, #224]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d4:	4a24      	ldr	r2, [pc, #144]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013da:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001428:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <HAL_GPIO_Init+0x304>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	f67f aea2 	bls.w	8001180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40013800 	.word	0x40013800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40020800 	.word	0x40020800
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40013c00 	.word	0x40013c00

0800146c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	887b      	ldrh	r3, [r7, #2]
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e001      	b.n	800148e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e12b      	b.n	8001706 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d106      	bne.n	80014c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fa6e 	bl	80009a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2224      	movs	r2, #36	@ 0x24
 80014cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001500:	f003 f9c2 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4a81      	ldr	r2, [pc, #516]	@ (8001710 <HAL_I2C_Init+0x274>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d807      	bhi.n	8001520 <HAL_I2C_Init+0x84>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4a80      	ldr	r2, [pc, #512]	@ (8001714 <HAL_I2C_Init+0x278>)
 8001514:	4293      	cmp	r3, r2
 8001516:	bf94      	ite	ls
 8001518:	2301      	movls	r3, #1
 800151a:	2300      	movhi	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	e006      	b.n	800152e <HAL_I2C_Init+0x92>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a7d      	ldr	r2, [pc, #500]	@ (8001718 <HAL_I2C_Init+0x27c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	bf94      	ite	ls
 8001528:	2301      	movls	r3, #1
 800152a:	2300      	movhi	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0e7      	b.n	8001706 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4a78      	ldr	r2, [pc, #480]	@ (800171c <HAL_I2C_Init+0x280>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	0c9b      	lsrs	r3, r3, #18
 8001540:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	430a      	orrs	r2, r1
 8001554:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a6a      	ldr	r2, [pc, #424]	@ (8001710 <HAL_I2C_Init+0x274>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d802      	bhi.n	8001570 <HAL_I2C_Init+0xd4>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3301      	adds	r3, #1
 800156e:	e009      	b.n	8001584 <HAL_I2C_Init+0xe8>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	4a69      	ldr	r2, [pc, #420]	@ (8001720 <HAL_I2C_Init+0x284>)
 800157c:	fba2 2303 	umull	r2, r3, r2, r3
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	3301      	adds	r3, #1
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	430b      	orrs	r3, r1
 800158a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001596:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	495c      	ldr	r1, [pc, #368]	@ (8001710 <HAL_I2C_Init+0x274>)
 80015a0:	428b      	cmp	r3, r1
 80015a2:	d819      	bhi.n	80015d8 <HAL_I2C_Init+0x13c>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e59      	subs	r1, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b2:	1c59      	adds	r1, r3, #1
 80015b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015b8:	400b      	ands	r3, r1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <HAL_I2C_Init+0x138>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1e59      	subs	r1, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015cc:	3301      	adds	r3, #1
 80015ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d2:	e051      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 80015d4:	2304      	movs	r3, #4
 80015d6:	e04f      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <HAL_I2C_Init+0x168>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e58      	subs	r0, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	440b      	add	r3, r1
 80015ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	e012      	b.n	800162a <HAL_I2C_Init+0x18e>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1e58      	subs	r0, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	0099      	lsls	r1, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	fbb0 f3f3 	udiv	r3, r0, r3
 800161a:	3301      	adds	r3, #1
 800161c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2300      	movne	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Init+0x196>
 800162e:	2301      	movs	r3, #1
 8001630:	e022      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10e      	bne.n	8001658 <HAL_I2C_Init+0x1bc>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1e58      	subs	r0, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6859      	ldr	r1, [r3, #4]
 8001642:	460b      	mov	r3, r1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	440b      	add	r3, r1
 8001648:	fbb0 f3f3 	udiv	r3, r0, r3
 800164c:	3301      	adds	r3, #1
 800164e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001656:	e00f      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1e58      	subs	r0, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	0099      	lsls	r1, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	fbb0 f3f3 	udiv	r3, r0, r3
 800166e:	3301      	adds	r3, #1
 8001670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001674:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	6809      	ldr	r1, [r1, #0]
 800167c:	4313      	orrs	r3, r2
 800167e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6911      	ldr	r1, [r2, #16]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68d2      	ldr	r2, [r2, #12]
 80016b2:	4311      	orrs	r1, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2220      	movs	r2, #32
 80016f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	000186a0 	.word	0x000186a0
 8001714:	001e847f 	.word	0x001e847f
 8001718:	003d08ff 	.word	0x003d08ff
 800171c:	431bde83 	.word	0x431bde83
 8001720:	10624dd3 	.word	0x10624dd3

08001724 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001736:	2b80      	cmp	r3, #128	@ 0x80
 8001738:	d103      	bne.n	8001742 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af02      	add	r7, sp, #8
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	461a      	mov	r2, r3
 800175c:	460b      	mov	r3, r1
 800175e:	817b      	strh	r3, [r7, #10]
 8001760:	4613      	mov	r3, r2
 8001762:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff fb8c 	bl	8000e80 <HAL_GetTick>
 8001768:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b20      	cmp	r3, #32
 8001774:	f040 80e0 	bne.w	8001938 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2319      	movs	r3, #25
 800177e:	2201      	movs	r2, #1
 8001780:	4970      	ldr	r1, [pc, #448]	@ (8001944 <HAL_I2C_Master_Transmit+0x1f4>)
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f002 f98c 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800178e:	2302      	movs	r3, #2
 8001790:	e0d3      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_I2C_Master_Transmit+0x50>
 800179c:	2302      	movs	r3, #2
 800179e:	e0cc      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d007      	beq.n	80017c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0201 	orr.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2221      	movs	r2, #33	@ 0x21
 80017da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2210      	movs	r2, #16
 80017e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	893a      	ldrh	r2, [r7, #8]
 80017f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4a50      	ldr	r2, [pc, #320]	@ (8001948 <HAL_I2C_Master_Transmit+0x1f8>)
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001808:	8979      	ldrh	r1, [r7, #10]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	6a3a      	ldr	r2, [r7, #32]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f001 ff4e 	bl	80036b0 <I2C_MasterRequestWrite>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e08d      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001834:	e066      	b.n	8001904 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	6a39      	ldr	r1, [r7, #32]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f002 fa4a 	bl	8003cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00d      	beq.n	8001862 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	2b04      	cmp	r3, #4
 800184c:	d107      	bne.n	800185e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800185c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06b      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800188a:	3b01      	subs	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b04      	cmp	r3, #4
 800189e:	d11b      	bne.n	80018d8 <HAL_I2C_Master_Transmit+0x188>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d017      	beq.n	80018d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	781a      	ldrb	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	6a39      	ldr	r1, [r7, #32]
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f002 fa41 	bl	8003d64 <I2C_WaitOnBTFFlagUntilTimeout>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d107      	bne.n	8001900 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e01a      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001908:	2b00      	cmp	r3, #0
 800190a:	d194      	bne.n	8001836 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800191a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	e000      	b.n	800193a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001938:	2302      	movs	r3, #2
  }
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	00100002 	.word	0x00100002
 8001948:	ffff0000 	.word	0xffff0000

0800194c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	@ 0x30
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	460b      	mov	r3, r1
 800195a:	817b      	strh	r3, [r7, #10]
 800195c:	4613      	mov	r3, r2
 800195e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff fa8e 	bl	8000e80 <HAL_GetTick>
 8001964:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b20      	cmp	r3, #32
 8001970:	f040 8217 	bne.w	8001da2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2319      	movs	r3, #25
 800197a:	2201      	movs	r2, #1
 800197c:	497c      	ldr	r1, [pc, #496]	@ (8001b70 <HAL_I2C_Master_Receive+0x224>)
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f002 f88e 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800198a:	2302      	movs	r3, #2
 800198c:	e20a      	b.n	8001da4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_I2C_Master_Receive+0x50>
 8001998:	2302      	movs	r3, #2
 800199a:	e203      	b.n	8001da4 <HAL_I2C_Master_Receive+0x458>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d007      	beq.n	80019c2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0201 	orr.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2222      	movs	r2, #34	@ 0x22
 80019d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2210      	movs	r2, #16
 80019de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	893a      	ldrh	r2, [r7, #8]
 80019f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4a5c      	ldr	r2, [pc, #368]	@ (8001b74 <HAL_I2C_Master_Receive+0x228>)
 8001a02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a04:	8979      	ldrh	r1, [r7, #10]
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f001 fed2 	bl	80037b4 <I2C_MasterRequestRead>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e1c4      	b.n	8001da4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d113      	bne.n	8001a4a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	623b      	str	r3, [r7, #32]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	623b      	str	r3, [r7, #32]
 8001a36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e198      	b.n	8001d7c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d11b      	bne.n	8001a8a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e178      	b.n	8001d7c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d11b      	bne.n	8001aca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ab0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	e158      	b.n	8001d7c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ad8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001af0:	e144      	b.n	8001d7c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	f200 80f1 	bhi.w	8001cde <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d123      	bne.n	8001b4c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f002 f9a5 	bl	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e145      	b.n	8001da4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b4a:	e117      	b.n	8001d7c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d14e      	bne.n	8001bf2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4906      	ldr	r1, [pc, #24]	@ (8001b78 <HAL_I2C_Master_Receive+0x22c>)
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f001 ff9e 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d008      	beq.n	8001b7c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e11a      	b.n	8001da4 <HAL_I2C_Master_Receive+0x458>
 8001b6e:	bf00      	nop
 8001b70:	00100002 	.word	0x00100002
 8001b74:	ffff0000 	.word	0xffff0000
 8001b78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bf0:	e0c4      	b.n	8001d7c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	496c      	ldr	r1, [pc, #432]	@ (8001dac <HAL_I2C_Master_Receive+0x460>)
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f001 ff4f 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0cb      	b.n	8001da4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c54:	2200      	movs	r2, #0
 8001c56:	4955      	ldr	r1, [pc, #340]	@ (8001dac <HAL_I2C_Master_Receive+0x460>)
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f001 ff21 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e09d      	b.n	8001da4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cdc:	e04e      	b.n	8001d7c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f002 f8b8 	bl	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e058      	b.n	8001da4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d124      	bne.n	8001d7c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d107      	bne.n	8001d4a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d48:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f47f aeb6 	bne.w	8001af2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3728      	adds	r7, #40	@ 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	00010004 	.word	0x00010004

08001db0 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	d158      	bne.n	8001e7c <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_I2C_Slave_Transmit_IT+0x26>
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e051      	b.n	8001e7e <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_I2C_Slave_Transmit_IT+0x38>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e04a      	b.n	8001e7e <HAL_I2C_Slave_Transmit_IT+0xce>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d007      	beq.n	8001e0e <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0201 	orr.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e1c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2221      	movs	r2, #33	@ 0x21
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	88fa      	ldrh	r2, [r7, #6]
 8001e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e8c <HAL_I2C_Slave_Transmit_IT+0xdc>)
 8001e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001e76:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	ffff0000 	.word	0xffff0000

08001e90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001eb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d003      	beq.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x38>
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b40      	cmp	r3, #64	@ 0x40
 8001ec4:	f040 80c1 	bne.w	800204a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_I2C_EV_IRQHandler+0x6e>
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001ee8:	d003      	beq.n	8001ef2 <HAL_I2C_EV_IRQHandler+0x62>
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001ef0:	d101      	bne.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x66>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_I2C_EV_IRQHandler+0x68>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	f000 8132 	beq.w	8002162 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00c      	beq.n	8001f22 <HAL_I2C_EV_IRQHandler+0x92>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	0a5b      	lsrs	r3, r3, #9
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f002 f82b 	bl	8003f70 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fda9 	bl	8002a72 <I2C_Master_SB>
 8001f20:	e092      	b.n	8002048 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_I2C_EV_IRQHandler+0xb2>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	0a5b      	lsrs	r3, r3, #9
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fe1f 	bl	8002b7e <I2C_Master_ADD10>
 8001f40:	e082      	b.n	8002048 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_I2C_EV_IRQHandler+0xd2>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	0a5b      	lsrs	r3, r3, #9
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fe39 	bl	8002bd2 <I2C_Master_ADDR>
 8001f60:	e072      	b.n	8002048 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d03b      	beq.n	8001fe6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f7c:	f000 80f3 	beq.w	8002166 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	09db      	lsrs	r3, r3, #7
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00f      	beq.n	8001fac <HAL_I2C_EV_IRQHandler+0x11c>
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	0a9b      	lsrs	r3, r3, #10
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <HAL_I2C_EV_IRQHandler+0x11c>
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d103      	bne.n	8001fac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fa01 	bl	80023ac <I2C_MasterTransmit_TXE>
 8001faa:	e04d      	b.n	8002048 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80d6 	beq.w	8002166 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	0a5b      	lsrs	r3, r3, #9
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80cf 	beq.w	8002166 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	2b21      	cmp	r3, #33	@ 0x21
 8001fcc:	d103      	bne.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fa88 	bl	80024e4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fd4:	e0c7      	b.n	8002166 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	2b40      	cmp	r3, #64	@ 0x40
 8001fda:	f040 80c4 	bne.w	8002166 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 faf6 	bl	80025d0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe4:	e0bf      	b.n	8002166 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ff4:	f000 80b7 	beq.w	8002166 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00f      	beq.n	8002024 <HAL_I2C_EV_IRQHandler+0x194>
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	0a9b      	lsrs	r3, r3, #10
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <HAL_I2C_EV_IRQHandler+0x194>
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d103      	bne.n	8002024 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fb6f 	bl	8002700 <I2C_MasterReceive_RXNE>
 8002022:	e011      	b.n	8002048 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 809a 	beq.w	8002166 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	0a5b      	lsrs	r3, r3, #9
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8093 	beq.w	8002166 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fc25 	bl	8002890 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002046:	e08e      	b.n	8002166 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002048:	e08d      	b.n	8002166 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e007      	b.n	800206c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d012      	beq.n	800209e <HAL_I2C_EV_IRQHandler+0x20e>
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	0a5b      	lsrs	r3, r3, #9
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00c      	beq.n	800209e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002094:	69b9      	ldr	r1, [r7, #24]
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 ffea 	bl	8003070 <I2C_Slave_ADDR>
 800209c:	e066      	b.n	800216c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_I2C_EV_IRQHandler+0x22e>
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	0a5b      	lsrs	r3, r3, #9
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f001 f824 	bl	8003104 <I2C_Slave_STOPF>
 80020bc:	e056      	b.n	800216c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020be:	7bbb      	ldrb	r3, [r7, #14]
 80020c0:	2b21      	cmp	r3, #33	@ 0x21
 80020c2:	d002      	beq.n	80020ca <HAL_I2C_EV_IRQHandler+0x23a>
 80020c4:	7bbb      	ldrb	r3, [r7, #14]
 80020c6:	2b29      	cmp	r3, #41	@ 0x29
 80020c8:	d125      	bne.n	8002116 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	09db      	lsrs	r3, r3, #7
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00f      	beq.n	80020f6 <HAL_I2C_EV_IRQHandler+0x266>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	0a9b      	lsrs	r3, r3, #10
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_I2C_EV_IRQHandler+0x266>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 ff00 	bl	8002ef4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020f4:	e039      	b.n	800216a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d033      	beq.n	800216a <HAL_I2C_EV_IRQHandler+0x2da>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	0a5b      	lsrs	r3, r3, #9
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d02d      	beq.n	800216a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 ff2d 	bl	8002f6e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002114:	e029      	b.n	800216a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00f      	beq.n	8002142 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	0a9b      	lsrs	r3, r3, #10
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_I2C_EV_IRQHandler+0x2b2>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 ff38 	bl	8002fb0 <I2C_SlaveReceive_RXNE>
 8002140:	e014      	b.n	800216c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00e      	beq.n	800216c <HAL_I2C_EV_IRQHandler+0x2dc>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	0a5b      	lsrs	r3, r3, #9
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 ff66 	bl	800302c <I2C_SlaveReceive_BTF>
 8002160:	e004      	b.n	800216c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002162:	bf00      	nop
 8002164:	e002      	b.n	800216c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002166:	bf00      	nop
 8002168:	e000      	b.n	800216c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800216a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b08a      	sub	sp, #40	@ 0x28
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002194:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00e      	beq.n	80021c0 <HAL_I2C_ER_IRQHandler+0x4e>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80021be:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	0a5b      	lsrs	r3, r3, #9
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <HAL_I2C_ER_IRQHandler+0x78>
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	f043 0302 	orr.w	r3, r3, #2
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80021e8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	0a9b      	lsrs	r3, r3, #10
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d03f      	beq.n	8002276 <HAL_I2C_ER_IRQHandler+0x104>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d039      	beq.n	8002276 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002202:	7efb      	ldrb	r3, [r7, #27]
 8002204:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002214:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800221c:	7ebb      	ldrb	r3, [r7, #26]
 800221e:	2b20      	cmp	r3, #32
 8002220:	d112      	bne.n	8002248 <HAL_I2C_ER_IRQHandler+0xd6>
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10f      	bne.n	8002248 <HAL_I2C_ER_IRQHandler+0xd6>
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	2b21      	cmp	r3, #33	@ 0x21
 800222c:	d008      	beq.n	8002240 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800222e:	7cfb      	ldrb	r3, [r7, #19]
 8002230:	2b29      	cmp	r3, #41	@ 0x29
 8002232:	d005      	beq.n	8002240 <HAL_I2C_ER_IRQHandler+0xce>
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	2b28      	cmp	r3, #40	@ 0x28
 8002238:	d106      	bne.n	8002248 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b21      	cmp	r3, #33	@ 0x21
 800223e:	d103      	bne.n	8002248 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f001 f88f 	bl	8003364 <I2C_Slave_AF>
 8002246:	e016      	b.n	8002276 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002250:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800225a:	7efb      	ldrb	r3, [r7, #27]
 800225c:	2b10      	cmp	r3, #16
 800225e:	d002      	beq.n	8002266 <HAL_I2C_ER_IRQHandler+0xf4>
 8002260:	7efb      	ldrb	r3, [r7, #27]
 8002262:	2b40      	cmp	r3, #64	@ 0x40
 8002264:	d107      	bne.n	8002276 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002274:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	0adb      	lsrs	r3, r3, #11
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00e      	beq.n	80022a0 <HAL_I2C_ER_IRQHandler+0x12e>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800229e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80022a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f001 f8ca 	bl	800344c <I2C_ITError>
  }
}
 80022b8:	bf00      	nop
 80022ba:	3728      	adds	r7, #40	@ 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	70fb      	strb	r3, [r7, #3]
 800231c:	4613      	mov	r3, r2
 800231e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800239e:	b2db      	uxtb	r3, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d150      	bne.n	8002474 <I2C_MasterTransmit_TXE+0xc8>
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b21      	cmp	r3, #33	@ 0x21
 80023d6:	d14d      	bne.n	8002474 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d01d      	beq.n	800241a <I2C_MasterTransmit_TXE+0x6e>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d01a      	beq.n	800241a <I2C_MasterTransmit_TXE+0x6e>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023ea:	d016      	beq.n	800241a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023fa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2211      	movs	r2, #17
 8002400:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff54 	bl	80022c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002418:	e060      	b.n	80024dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002428:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002438:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b40      	cmp	r3, #64	@ 0x40
 8002452:	d107      	bne.n	8002464 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ff6f 	bl	8002340 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002462:	e03b      	b.n	80024dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff27 	bl	80022c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002472:	e033      	b.n	80024dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b21      	cmp	r3, #33	@ 0x21
 8002478:	d005      	beq.n	8002486 <I2C_MasterTransmit_TXE+0xda>
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	2b40      	cmp	r3, #64	@ 0x40
 800247e:	d12d      	bne.n	80024dc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b22      	cmp	r3, #34	@ 0x22
 8002484:	d12a      	bne.n	80024dc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d108      	bne.n	80024a2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800249e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80024a0:	e01c      	b.n	80024dc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b40      	cmp	r3, #64	@ 0x40
 80024ac:	d103      	bne.n	80024b6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f88e 	bl	80025d0 <I2C_MemoryTransmit_TXE_BTF>
}
 80024b4:	e012      	b.n	80024dc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80024da:	e7ff      	b.n	80024dc <I2C_MasterTransmit_TXE+0x130>
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b21      	cmp	r3, #33	@ 0x21
 80024fc:	d164      	bne.n	80025c8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d012      	beq.n	800252e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800252c:	e04c      	b.n	80025c8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d01d      	beq.n	8002570 <I2C_MasterTransmit_BTF+0x8c>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b20      	cmp	r3, #32
 8002538:	d01a      	beq.n	8002570 <I2C_MasterTransmit_BTF+0x8c>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002540:	d016      	beq.n	8002570 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002550:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2211      	movs	r2, #17
 8002556:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff fea9 	bl	80022c0 <HAL_I2C_MasterTxCpltCallback>
}
 800256e:	e02b      	b.n	80025c8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800257e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800258e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b40      	cmp	r3, #64	@ 0x40
 80025a8:	d107      	bne.n	80025ba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff fec4 	bl	8002340 <HAL_I2C_MemTxCpltCallback>
}
 80025b8:	e006      	b.n	80025c8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fe7c 	bl	80022c0 <HAL_I2C_MasterTxCpltCallback>
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d11d      	bne.n	8002624 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d10b      	bne.n	8002608 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002600:	1c9a      	adds	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002606:	e077      	b.n	80026f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260c:	b29b      	uxth	r3, r3
 800260e:	121b      	asrs	r3, r3, #8
 8002610:	b2da      	uxtb	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002622:	e069      	b.n	80026f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002628:	2b01      	cmp	r3, #1
 800262a:	d10b      	bne.n	8002644 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002630:	b2da      	uxtb	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002642:	e059      	b.n	80026f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002648:	2b02      	cmp	r3, #2
 800264a:	d152      	bne.n	80026f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b22      	cmp	r3, #34	@ 0x22
 8002650:	d10d      	bne.n	800266e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002660:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800266c:	e044      	b.n	80026f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d015      	beq.n	80026a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b21      	cmp	r3, #33	@ 0x21
 800267c:	d112      	bne.n	80026a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80026a2:	e029      	b.n	80026f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d124      	bne.n	80026f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b21      	cmp	r3, #33	@ 0x21
 80026b2:	d121      	bne.n	80026f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026c2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff fe28 	bl	8002340 <HAL_I2C_MemTxCpltCallback>
}
 80026f0:	e002      	b.n	80026f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff f816 	bl	8001724 <I2C_Flush_DR>
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b22      	cmp	r3, #34	@ 0x22
 8002712:	f040 80b9 	bne.w	8002888 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d921      	bls.n	800276e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b03      	cmp	r3, #3
 8002758:	f040 8096 	bne.w	8002888 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800276a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800276c:	e08c      	b.n	8002888 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	2b02      	cmp	r3, #2
 8002774:	d07f      	beq.n	8002876 <I2C_MasterReceive_RXNE+0x176>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d002      	beq.n	8002782 <I2C_MasterReceive_RXNE+0x82>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d179      	bne.n	8002876 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f001 fb36 	bl	8003df4 <I2C_WaitOnSTOPRequestThroughIT>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d14c      	bne.n	8002828 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800279c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b40      	cmp	r3, #64	@ 0x40
 80027e6:	d10a      	bne.n	80027fe <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fdac 	bl	8002354 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80027fc:	e044      	b.n	8002888 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d002      	beq.n	8002812 <I2C_MasterReceive_RXNE+0x112>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b20      	cmp	r3, #32
 8002810:	d103      	bne.n	800281a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	@ 0x30
 8002818:	e002      	b.n	8002820 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2212      	movs	r2, #18
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fd57 	bl	80022d4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002826:	e02f      	b.n	8002888 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002836:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fd7a 	bl	8002368 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002874:	e008      	b.n	8002888 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002884:	605a      	str	r2, [r3, #4]
}
 8002886:	e7ff      	b.n	8002888 <I2C_MasterReceive_RXNE+0x188>
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d11b      	bne.n	80028e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80028de:	e0c4      	b.n	8002a6a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d129      	bne.n	800293e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d00a      	beq.n	8002916 <I2C_MasterReceive_BTF+0x86>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d007      	beq.n	8002916 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002914:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800293c:	e095      	b.n	8002a6a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d17d      	bne.n	8002a44 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d002      	beq.n	8002954 <I2C_MasterReceive_BTF+0xc4>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b10      	cmp	r3, #16
 8002952:	d108      	bne.n	8002966 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e016      	b.n	8002994 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b04      	cmp	r3, #4
 800296a:	d002      	beq.n	8002972 <I2C_MasterReceive_BTF+0xe2>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d108      	bne.n	8002984 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e007      	b.n	8002994 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002992:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80029ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b40      	cmp	r3, #64	@ 0x40
 8002a02:	d10a      	bne.n	8002a1a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fc9e 	bl	8002354 <HAL_I2C_MemRxCpltCallback>
}
 8002a18:	e027      	b.n	8002a6a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d002      	beq.n	8002a2e <I2C_MasterReceive_BTF+0x19e>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d103      	bne.n	8002a36 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a34:	e002      	b.n	8002a3c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2212      	movs	r2, #18
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff fc49 	bl	80022d4 <HAL_I2C_MasterRxCpltCallback>
}
 8002a42:	e012      	b.n	8002a6a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b40      	cmp	r3, #64	@ 0x40
 8002a84:	d117      	bne.n	8002ab6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a9e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002aa0:	e067      	b.n	8002b72 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	611a      	str	r2, [r3, #16]
}
 8002ab4:	e05d      	b.n	8002b72 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002abe:	d133      	bne.n	8002b28 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b21      	cmp	r3, #33	@ 0x21
 8002aca:	d109      	bne.n	8002ae0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002adc:	611a      	str	r2, [r3, #16]
 8002ade:	e008      	b.n	8002af2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <I2C_Master_SB+0x92>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d108      	bne.n	8002b16 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d032      	beq.n	8002b72 <I2C_Master_SB+0x100>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d02d      	beq.n	8002b72 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b24:	605a      	str	r2, [r3, #4]
}
 8002b26:	e024      	b.n	8002b72 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10e      	bne.n	8002b4e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	11db      	asrs	r3, r3, #7
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f003 0306 	and.w	r3, r3, #6
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f063 030f 	orn	r3, r3, #15
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	611a      	str	r2, [r3, #16]
}
 8002b4c:	e011      	b.n	8002b72 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10d      	bne.n	8002b72 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	11db      	asrs	r3, r3, #7
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f003 0306 	and.w	r3, r3, #6
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	f063 030e 	orn	r3, r3, #14
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	611a      	str	r2, [r3, #16]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <I2C_Master_ADD10+0x26>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d108      	bne.n	8002bb6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00c      	beq.n	8002bc6 <I2C_Master_ADD10+0x48>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bc4:	605a      	str	r2, [r3, #4]
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b091      	sub	sp, #68	@ 0x44
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002be0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b22      	cmp	r3, #34	@ 0x22
 8002bfa:	f040 8169 	bne.w	8002ed0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10f      	bne.n	8002c26 <I2C_Master_ADDR+0x54>
 8002c06:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002c0a:	2b40      	cmp	r3, #64	@ 0x40
 8002c0c:	d10b      	bne.n	8002c26 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c24:	e160      	b.n	8002ee8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d11d      	bne.n	8002c6a <I2C_Master_ADDR+0x98>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002c36:	d118      	bne.n	8002c6a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c5c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c68:	e13e      	b.n	8002ee8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d113      	bne.n	8002c9c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c74:	2300      	movs	r3, #0
 8002c76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e115      	b.n	8002ec8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	f040 808a 	bne.w	8002dbc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002caa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cae:	d137      	bne.n	8002d20 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cbe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cce:	d113      	bne.n	8002cf8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cde:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	e0e7      	b.n	8002ec8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e0d3      	b.n	8002ec8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d02e      	beq.n	8002d84 <I2C_Master_ADDR+0x1b2>
 8002d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d02b      	beq.n	8002d84 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2e:	2b12      	cmp	r3, #18
 8002d30:	d102      	bne.n	8002d38 <I2C_Master_ADDR+0x166>
 8002d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d125      	bne.n	8002d84 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d00e      	beq.n	8002d5c <I2C_Master_ADDR+0x18a>
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d00b      	beq.n	8002d5c <I2C_Master_ADDR+0x18a>
 8002d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d008      	beq.n	8002d5c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e007      	b.n	8002d6c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d6a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	e0a1      	b.n	8002ec8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d92:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d94:	2300      	movs	r3, #0
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	61bb      	str	r3, [r7, #24]
 8002da8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e085      	b.n	8002ec8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d14d      	bne.n	8002e62 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d016      	beq.n	8002dfa <I2C_Master_ADDR+0x228>
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d013      	beq.n	8002dfa <I2C_Master_ADDR+0x228>
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d010      	beq.n	8002dfa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	e007      	b.n	8002e0a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e08:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e18:	d117      	bne.n	8002e4a <I2C_Master_ADDR+0x278>
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e20:	d00b      	beq.n	8002e3a <I2C_Master_ADDR+0x268>
 8002e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d008      	beq.n	8002e3a <I2C_Master_ADDR+0x268>
 8002e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d005      	beq.n	8002e3a <I2C_Master_ADDR+0x268>
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d002      	beq.n	8002e3a <I2C_Master_ADDR+0x268>
 8002e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d107      	bne.n	8002e4a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	e032      	b.n	8002ec8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e70:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e80:	d117      	bne.n	8002eb2 <I2C_Master_ADDR+0x2e0>
 8002e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e88:	d00b      	beq.n	8002ea2 <I2C_Master_ADDR+0x2d0>
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d008      	beq.n	8002ea2 <I2C_Master_ADDR+0x2d0>
 8002e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d005      	beq.n	8002ea2 <I2C_Master_ADDR+0x2d0>
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d002      	beq.n	8002ea2 <I2C_Master_ADDR+0x2d0>
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d107      	bne.n	8002eb2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002eb0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002ece:	e00b      	b.n	8002ee8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
}
 8002ee6:	e7ff      	b.n	8002ee8 <I2C_Master_ADDR+0x316>
 8002ee8:	bf00      	nop
 8002eea:	3744      	adds	r7, #68	@ 0x44
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d02b      	beq.n	8002f66 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	781a      	ldrb	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d114      	bne.n	8002f66 <I2C_SlaveTransmit_TXE+0x72>
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b29      	cmp	r3, #41	@ 0x29
 8002f40:	d111      	bne.n	8002f66 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f50:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2221      	movs	r2, #33	@ 0x21
 8002f56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2228      	movs	r2, #40	@ 0x28
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff f9c1 	bl	80022e8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d011      	beq.n	8002fa4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fbe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d02c      	beq.n	8003024 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d114      	bne.n	8003024 <I2C_SlaveReceive_RXNE+0x74>
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ffe:	d111      	bne.n	8003024 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800300e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2222      	movs	r2, #34	@ 0x22
 8003014:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2228      	movs	r2, #40	@ 0x28
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff f96c 	bl	80022fc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d012      	beq.n	8003064 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800308a:	2b28      	cmp	r3, #40	@ 0x28
 800308c:	d127      	bne.n	80030de <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800309c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	09db      	lsrs	r3, r3, #7
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	81bb      	strh	r3, [r7, #12]
 80030c0:	e002      	b.n	80030c8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80030d0:	89ba      	ldrh	r2, [r7, #12]
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	4619      	mov	r1, r3
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff f91a 	bl	8002310 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030dc:	e00e      	b.n	80030fc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003112:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003122:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003124:	2300      	movs	r3, #0
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003150:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800315c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003160:	d172      	bne.n	8003248 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b22      	cmp	r3, #34	@ 0x22
 8003166:	d002      	beq.n	800316e <I2C_Slave_STOPF+0x6a>
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b2a      	cmp	r3, #42	@ 0x2a
 800316c:	d135      	bne.n	80031da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	b29a      	uxth	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd ffcd 	bl	8001146 <HAL_DMA_GetState>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d049      	beq.n	8003246 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b6:	4a69      	ldr	r2, [pc, #420]	@ (800335c <I2C_Slave_STOPF+0x258>)
 80031b8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd ff9f 	bl	8001102 <HAL_DMA_Abort_IT>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d03d      	beq.n	8003246 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80031d4:	4610      	mov	r0, r2
 80031d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031d8:	e035      	b.n	8003246 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	f043 0204 	orr.w	r2, r3, #4
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800320c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd ff97 	bl	8001146 <HAL_DMA_GetState>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d014      	beq.n	8003248 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003222:	4a4e      	ldr	r2, [pc, #312]	@ (800335c <I2C_Slave_STOPF+0x258>)
 8003224:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd ff69 	bl	8001102 <HAL_DMA_Abort_IT>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003240:	4610      	mov	r0, r2
 8003242:	4798      	blx	r3
 8003244:	e000      	b.n	8003248 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003246:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d03e      	beq.n	80032d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b04      	cmp	r3, #4
 800325e:	d112      	bne.n	8003286 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003290:	2b40      	cmp	r3, #64	@ 0x40
 8003292:	d112      	bne.n	80032ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0204 	orr.w	r2, r3, #4
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f8b7 	bl	800344c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80032de:	e039      	b.n	8003354 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80032e4:	d109      	bne.n	80032fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2228      	movs	r2, #40	@ 0x28
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff f801 	bl	80022fc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b28      	cmp	r3, #40	@ 0x28
 8003304:	d111      	bne.n	800332a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a15      	ldr	r2, [pc, #84]	@ (8003360 <I2C_Slave_STOPF+0x25c>)
 800330a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff f802 	bl	800232c <HAL_I2C_ListenCpltCallback>
}
 8003328:	e014      	b.n	8003354 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	2b22      	cmp	r3, #34	@ 0x22
 8003330:	d002      	beq.n	8003338 <I2C_Slave_STOPF+0x234>
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b22      	cmp	r3, #34	@ 0x22
 8003336:	d10d      	bne.n	8003354 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fe ffd4 	bl	80022fc <HAL_I2C_SlaveRxCpltCallback>
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	08003951 	.word	0x08003951
 8003360:	ffff0000 	.word	0xffff0000

08003364 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d002      	beq.n	8003386 <I2C_Slave_AF+0x22>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b20      	cmp	r3, #32
 8003384:	d129      	bne.n	80033da <I2C_Slave_AF+0x76>
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b28      	cmp	r3, #40	@ 0x28
 800338a:	d126      	bne.n	80033da <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a2e      	ldr	r2, [pc, #184]	@ (8003448 <I2C_Slave_AF+0xe4>)
 8003390:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033a0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033aa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe ffaa 	bl	800232c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80033d8:	e031      	b.n	800343e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b21      	cmp	r3, #33	@ 0x21
 80033de:	d129      	bne.n	8003434 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <I2C_Slave_AF+0xe4>)
 80033e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2221      	movs	r2, #33	@ 0x21
 80033ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800340a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003414:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003424:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fe f97c 	bl	8001724 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fe ff5b 	bl	80022e8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003432:	e004      	b.n	800343e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800343c:	615a      	str	r2, [r3, #20]
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	ffff0000 	.word	0xffff0000

0800344c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800345a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003462:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003464:	7bbb      	ldrb	r3, [r7, #14]
 8003466:	2b10      	cmp	r3, #16
 8003468:	d002      	beq.n	8003470 <I2C_ITError+0x24>
 800346a:	7bbb      	ldrb	r3, [r7, #14]
 800346c:	2b40      	cmp	r3, #64	@ 0x40
 800346e:	d10a      	bne.n	8003486 <I2C_ITError+0x3a>
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b22      	cmp	r3, #34	@ 0x22
 8003474:	d107      	bne.n	8003486 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003484:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800348c:	2b28      	cmp	r3, #40	@ 0x28
 800348e:	d107      	bne.n	80034a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2228      	movs	r2, #40	@ 0x28
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800349e:	e015      	b.n	80034cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ae:	d00a      	beq.n	80034c6 <I2C_ITError+0x7a>
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	2b60      	cmp	r3, #96	@ 0x60
 80034b4:	d007      	beq.n	80034c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034da:	d162      	bne.n	80035a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d020      	beq.n	800353c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fe:	4a6a      	ldr	r2, [pc, #424]	@ (80036a8 <I2C_ITError+0x25c>)
 8003500:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd fdfb 	bl	8001102 <HAL_DMA_Abort_IT>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8089 	beq.w	8003626 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003536:	4610      	mov	r0, r2
 8003538:	4798      	blx	r3
 800353a:	e074      	b.n	8003626 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	4a59      	ldr	r2, [pc, #356]	@ (80036a8 <I2C_ITError+0x25c>)
 8003542:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd fdda 	bl	8001102 <HAL_DMA_Abort_IT>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d068      	beq.n	8003626 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355e:	2b40      	cmp	r3, #64	@ 0x40
 8003560:	d10b      	bne.n	800357a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800359c:	4610      	mov	r0, r2
 800359e:	4798      	blx	r3
 80035a0:	e041      	b.n	8003626 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b60      	cmp	r3, #96	@ 0x60
 80035ac:	d125      	bne.n	80035fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c6:	2b40      	cmp	r3, #64	@ 0x40
 80035c8:	d10b      	bne.n	80035e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe fec2 	bl	800237c <HAL_I2C_AbortCpltCallback>
 80035f8:	e015      	b.n	8003626 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b40      	cmp	r3, #64	@ 0x40
 8003606:	d10b      	bne.n	8003620 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fe fea1 	bl	8002368 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10e      	bne.n	8003654 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003646:	2b00      	cmp	r3, #0
 8003648:	d104      	bne.n	8003654 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003662:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d113      	bne.n	80036a0 <I2C_ITError+0x254>
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b28      	cmp	r3, #40	@ 0x28
 800367c:	d110      	bne.n	80036a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <I2C_ITError+0x260>)
 8003682:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe fe46 	bl	800232c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	08003951 	.word	0x08003951
 80036ac:	ffff0000 	.word	0xffff0000

080036b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	460b      	mov	r3, r1
 80036be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d006      	beq.n	80036da <I2C_MasterRequestWrite+0x2a>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d003      	beq.n	80036da <I2C_MasterRequestWrite+0x2a>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036d8:	d108      	bne.n	80036ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e00b      	b.n	8003704 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	2b12      	cmp	r3, #18
 80036f2:	d107      	bne.n	8003704 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003702:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f9c5 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00d      	beq.n	8003738 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800372a:	d103      	bne.n	8003734 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e035      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003740:	d108      	bne.n	8003754 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003750:	611a      	str	r2, [r3, #16]
 8003752:	e01b      	b.n	800378c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003754:	897b      	ldrh	r3, [r7, #10]
 8003756:	11db      	asrs	r3, r3, #7
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f003 0306 	and.w	r3, r3, #6
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f063 030f 	orn	r3, r3, #15
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	490e      	ldr	r1, [pc, #56]	@ (80037ac <I2C_MasterRequestWrite+0xfc>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fa0e 	bl	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e010      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003782:	897b      	ldrh	r3, [r7, #10]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4907      	ldr	r1, [pc, #28]	@ (80037b0 <I2C_MasterRequestWrite+0x100>)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f9fe 	bl	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	00010008 	.word	0x00010008
 80037b0:	00010002 	.word	0x00010002

080037b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	607a      	str	r2, [r7, #4]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	460b      	mov	r3, r1
 80037c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d006      	beq.n	80037ee <I2C_MasterRequestRead+0x3a>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d003      	beq.n	80037ee <I2C_MasterRequestRead+0x3a>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037ec:	d108      	bne.n	8003800 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e00b      	b.n	8003818 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003804:	2b11      	cmp	r3, #17
 8003806:	d107      	bne.n	8003818 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003816:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f93b 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383e:	d103      	bne.n	8003848 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e079      	b.n	8003940 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003854:	d108      	bne.n	8003868 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003856:	897b      	ldrh	r3, [r7, #10]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	b2da      	uxtb	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	611a      	str	r2, [r3, #16]
 8003866:	e05f      	b.n	8003928 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003868:	897b      	ldrh	r3, [r7, #10]
 800386a:	11db      	asrs	r3, r3, #7
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f003 0306 	and.w	r3, r3, #6
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f063 030f 	orn	r3, r3, #15
 8003878:	b2da      	uxtb	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4930      	ldr	r1, [pc, #192]	@ (8003948 <I2C_MasterRequestRead+0x194>)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f984 	bl	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e054      	b.n	8003940 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003896:	897b      	ldrh	r3, [r7, #10]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4929      	ldr	r1, [pc, #164]	@ (800394c <I2C_MasterRequestRead+0x198>)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f974 	bl	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e044      	b.n	8003940 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f8d9 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003902:	d103      	bne.n	800390c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e017      	b.n	8003940 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003910:	897b      	ldrh	r3, [r7, #10]
 8003912:	11db      	asrs	r3, r3, #7
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f003 0306 	and.w	r3, r3, #6
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f063 030e 	orn	r3, r3, #14
 8003920:	b2da      	uxtb	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4907      	ldr	r1, [pc, #28]	@ (800394c <I2C_MasterRequestRead+0x198>)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f930 	bl	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	00010008 	.word	0x00010008
 800394c:	00010002 	.word	0x00010002

08003950 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003968:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800396a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a98 <I2C_DMAAbort+0x148>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	08db      	lsrs	r3, r3, #3
 8003970:	4a4a      	ldr	r2, [pc, #296]	@ (8003a9c <I2C_DMAAbort+0x14c>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0a1a      	lsrs	r2, r3, #8
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	00da      	lsls	r2, r3, #3
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f043 0220 	orr.w	r2, r3, #32
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003996:	e00a      	b.n	80039ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3b01      	subs	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ac:	d0ea      	beq.n	8003984 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ba:	2200      	movs	r2, #0
 80039bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ca:	2200      	movs	r2, #0
 80039cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f0:	2200      	movs	r2, #0
 80039f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a00:	2200      	movs	r2, #0
 8003a02:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b60      	cmp	r3, #96	@ 0x60
 8003a1e:	d10e      	bne.n	8003a3e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2200      	movs	r2, #0
 8003a34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a36:	6978      	ldr	r0, [r7, #20]
 8003a38:	f7fe fca0 	bl	800237c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a3c:	e027      	b.n	8003a8e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a44:	2b28      	cmp	r3, #40	@ 0x28
 8003a46:	d117      	bne.n	8003a78 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2228      	movs	r2, #40	@ 0x28
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003a76:	e007      	b.n	8003a88 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003a88:	6978      	ldr	r0, [r7, #20]
 8003a8a:	f7fe fc6d 	bl	8002368 <HAL_I2C_ErrorCallback>
}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	14f8b589 	.word	0x14f8b589

08003aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab0:	e048      	b.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d044      	beq.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fd f9e1 	bl	8000e80 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d139      	bne.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	0c1b      	lsrs	r3, r3, #16
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d10d      	bne.n	8003af6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	43da      	mvns	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	e00c      	b.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	43da      	mvns	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4013      	ands	r3, r2
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d116      	bne.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e023      	b.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	0c1b      	lsrs	r3, r3, #16
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d10d      	bne.n	8003b6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	43da      	mvns	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	e00c      	b.n	8003b84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	43da      	mvns	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4013      	ands	r3, r2
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d093      	beq.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ba2:	e071      	b.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb2:	d123      	bne.n	8003bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	f043 0204 	orr.w	r2, r3, #4
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e067      	b.n	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d041      	beq.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c04:	f7fd f93c 	bl	8000e80 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d302      	bcc.n	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d136      	bne.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d10c      	bne.n	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bf14      	ite	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	2300      	moveq	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	e00b      	b.n	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	43da      	mvns	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf14      	ite	ne
 8003c50:	2301      	movne	r3, #1
 8003c52:	2300      	moveq	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d016      	beq.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e021      	b.n	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10c      	bne.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e00b      	b.n	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f47f af6d 	bne.w	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce0:	e034      	b.n	8003d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f915 	bl	8003f12 <I2C_IsAcknowledgeFailed>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e034      	b.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d028      	beq.n	8003d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7fd f8c1 	bl	8000e80 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11d      	bne.n	8003d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1a:	2b80      	cmp	r3, #128	@ 0x80
 8003d1c:	d016      	beq.n	8003d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e007      	b.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d56:	2b80      	cmp	r3, #128	@ 0x80
 8003d58:	d1c3      	bne.n	8003ce2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d70:	e034      	b.n	8003ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f8cd 	bl	8003f12 <I2C_IsAcknowledgeFailed>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e034      	b.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d028      	beq.n	8003ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8a:	f7fd f879 	bl	8000e80 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d302      	bcc.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d11d      	bne.n	8003ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d016      	beq.n	8003ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e007      	b.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d1c3      	bne.n	8003d72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e00:	4b13      	ldr	r3, [pc, #76]	@ (8003e50 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	08db      	lsrs	r3, r3, #3
 8003e06:	4a13      	ldr	r2, [pc, #76]	@ (8003e54 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	0a1a      	lsrs	r2, r3, #8
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d107      	bne.n	8003e32 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f043 0220 	orr.w	r2, r3, #32
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e008      	b.n	8003e44 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e40:	d0e9      	beq.n	8003e16 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	20000000 	.word	0x20000000
 8003e54:	14f8b589 	.word	0x14f8b589

08003e58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e64:	e049      	b.n	8003efa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d119      	bne.n	8003ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0210 	mvn.w	r2, #16
 8003e7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e030      	b.n	8003f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea8:	f7fc ffea 	bl	8000e80 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d11d      	bne.n	8003efa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec8:	2b40      	cmp	r3, #64	@ 0x40
 8003eca:	d016      	beq.n	8003efa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	f043 0220 	orr.w	r2, r3, #32
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e007      	b.n	8003f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f04:	2b40      	cmp	r3, #64	@ 0x40
 8003f06:	d1ae      	bne.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f28:	d11b      	bne.n	8003f62 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f32:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f043 0204 	orr.w	r2, r3, #4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003f80:	d103      	bne.n	8003f8a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f88:	e007      	b.n	8003f9a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003f92:	d102      	bne.n	8003f9a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2208      	movs	r2, #8
 8003f98:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e267      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d075      	beq.n	80040b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fc6:	4b88      	ldr	r3, [pc, #544]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d00c      	beq.n	8003fec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fd2:	4b85      	ldr	r3, [pc, #532]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d112      	bne.n	8004004 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fde:	4b82      	ldr	r3, [pc, #520]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fea:	d10b      	bne.n	8004004 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fec:	4b7e      	ldr	r3, [pc, #504]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d05b      	beq.n	80040b0 <HAL_RCC_OscConfig+0x108>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d157      	bne.n	80040b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e242      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800400c:	d106      	bne.n	800401c <HAL_RCC_OscConfig+0x74>
 800400e:	4b76      	ldr	r3, [pc, #472]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a75      	ldr	r2, [pc, #468]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e01d      	b.n	8004058 <HAL_RCC_OscConfig+0xb0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0x98>
 8004026:	4b70      	ldr	r3, [pc, #448]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a6f      	ldr	r2, [pc, #444]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 800402c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	4b6d      	ldr	r3, [pc, #436]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a6c      	ldr	r2, [pc, #432]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e00b      	b.n	8004058 <HAL_RCC_OscConfig+0xb0>
 8004040:	4b69      	ldr	r3, [pc, #420]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a68      	ldr	r2, [pc, #416]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8004046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	4b66      	ldr	r3, [pc, #408]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a65      	ldr	r2, [pc, #404]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8004052:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d013      	beq.n	8004088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fc ff0e 	bl	8000e80 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7fc ff0a 	bl	8000e80 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	@ 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e207      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	4b5b      	ldr	r3, [pc, #364]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCC_OscConfig+0xc0>
 8004086:	e014      	b.n	80040b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fc fefa 	bl	8000e80 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004090:	f7fc fef6 	bl	8000e80 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	@ 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e1f3      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a2:	4b51      	ldr	r3, [pc, #324]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0xe8>
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d063      	beq.n	8004186 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040be:	4b4a      	ldr	r3, [pc, #296]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ca:	4b47      	ldr	r3, [pc, #284]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d11c      	bne.n	8004110 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d6:	4b44      	ldr	r3, [pc, #272]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d116      	bne.n	8004110 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e2:	4b41      	ldr	r3, [pc, #260]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_RCC_OscConfig+0x152>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d001      	beq.n	80040fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e1c7      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fa:	4b3b      	ldr	r3, [pc, #236]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4937      	ldr	r1, [pc, #220]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410e:	e03a      	b.n	8004186 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004118:	4b34      	ldr	r3, [pc, #208]	@ (80041ec <HAL_RCC_OscConfig+0x244>)
 800411a:	2201      	movs	r2, #1
 800411c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411e:	f7fc feaf 	bl	8000e80 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004126:	f7fc feab 	bl	8000e80 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e1a8      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	4b2b      	ldr	r3, [pc, #172]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b28      	ldr	r3, [pc, #160]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4925      	ldr	r1, [pc, #148]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]
 8004158:	e015      	b.n	8004186 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415a:	4b24      	ldr	r3, [pc, #144]	@ (80041ec <HAL_RCC_OscConfig+0x244>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fc fe8e 	bl	8000e80 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004168:	f7fc fe8a 	bl	8000e80 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e187      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d036      	beq.n	8004200 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d016      	beq.n	80041c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419a:	4b15      	ldr	r3, [pc, #84]	@ (80041f0 <HAL_RCC_OscConfig+0x248>)
 800419c:	2201      	movs	r2, #1
 800419e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fc fe6e 	bl	8000e80 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a8:	f7fc fe6a 	bl	8000e80 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e167      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_RCC_OscConfig+0x240>)
 80041bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x200>
 80041c6:	e01b      	b.n	8004200 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c8:	4b09      	ldr	r3, [pc, #36]	@ (80041f0 <HAL_RCC_OscConfig+0x248>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ce:	f7fc fe57 	bl	8000e80 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d4:	e00e      	b.n	80041f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d6:	f7fc fe53 	bl	8000e80 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d907      	bls.n	80041f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e150      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
 80041e8:	40023800 	.word	0x40023800
 80041ec:	42470000 	.word	0x42470000
 80041f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	4b88      	ldr	r3, [pc, #544]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 80041f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1ea      	bne.n	80041d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8097 	beq.w	800433c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004212:	4b81      	ldr	r3, [pc, #516]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10f      	bne.n	800423e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	4b7d      	ldr	r3, [pc, #500]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	4a7c      	ldr	r2, [pc, #496]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800422c:	6413      	str	r3, [r2, #64]	@ 0x40
 800422e:	4b7a      	ldr	r3, [pc, #488]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423e:	4b77      	ldr	r3, [pc, #476]	@ (800441c <HAL_RCC_OscConfig+0x474>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d118      	bne.n	800427c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800424a:	4b74      	ldr	r3, [pc, #464]	@ (800441c <HAL_RCC_OscConfig+0x474>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a73      	ldr	r2, [pc, #460]	@ (800441c <HAL_RCC_OscConfig+0x474>)
 8004250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004256:	f7fc fe13 	bl	8000e80 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425e:	f7fc fe0f 	bl	8000e80 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e10c      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	4b6a      	ldr	r3, [pc, #424]	@ (800441c <HAL_RCC_OscConfig+0x474>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x2ea>
 8004284:	4b64      	ldr	r3, [pc, #400]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004288:	4a63      	ldr	r2, [pc, #396]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004290:	e01c      	b.n	80042cc <HAL_RCC_OscConfig+0x324>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b05      	cmp	r3, #5
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x30c>
 800429a:	4b5f      	ldr	r3, [pc, #380]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429e:	4a5e      	ldr	r2, [pc, #376]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 80042a0:	f043 0304 	orr.w	r3, r3, #4
 80042a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b2:	e00b      	b.n	80042cc <HAL_RCC_OscConfig+0x324>
 80042b4:	4b58      	ldr	r3, [pc, #352]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b8:	4a57      	ldr	r2, [pc, #348]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c0:	4b55      	ldr	r3, [pc, #340]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c4:	4a54      	ldr	r2, [pc, #336]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 80042c6:	f023 0304 	bic.w	r3, r3, #4
 80042ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d015      	beq.n	8004300 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fc fdd4 	bl	8000e80 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fc fdd0 	bl	8000e80 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e0cb      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f2:	4b49      	ldr	r3, [pc, #292]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0ee      	beq.n	80042dc <HAL_RCC_OscConfig+0x334>
 80042fe:	e014      	b.n	800432a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004300:	f7fc fdbe 	bl	8000e80 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004306:	e00a      	b.n	800431e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004308:	f7fc fdba 	bl	8000e80 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0b5      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431e:	4b3e      	ldr	r3, [pc, #248]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1ee      	bne.n	8004308 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d105      	bne.n	800433c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004330:	4b39      	ldr	r3, [pc, #228]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 8004332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004334:	4a38      	ldr	r2, [pc, #224]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 8004336:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800433a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80a1 	beq.w	8004488 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004346:	4b34      	ldr	r3, [pc, #208]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b08      	cmp	r3, #8
 8004350:	d05c      	beq.n	800440c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d141      	bne.n	80043de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b31      	ldr	r3, [pc, #196]	@ (8004420 <HAL_RCC_OscConfig+0x478>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fc fd8e 	bl	8000e80 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004368:	f7fc fd8a 	bl	8000e80 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e087      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	4b27      	ldr	r3, [pc, #156]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69da      	ldr	r2, [r3, #28]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	019b      	lsls	r3, r3, #6
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	3b01      	subs	r3, #1
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a8:	061b      	lsls	r3, r3, #24
 80043aa:	491b      	ldr	r1, [pc, #108]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <HAL_RCC_OscConfig+0x478>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fc fd63 	bl	8000e80 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043be:	f7fc fd5f 	bl	8000e80 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e05c      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d0:	4b11      	ldr	r3, [pc, #68]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x416>
 80043dc:	e054      	b.n	8004488 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043de:	4b10      	ldr	r3, [pc, #64]	@ (8004420 <HAL_RCC_OscConfig+0x478>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fc fd4c 	bl	8000e80 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fc fd48 	bl	8000e80 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e045      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_RCC_OscConfig+0x470>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x444>
 800440a:	e03d      	b.n	8004488 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e038      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
 8004418:	40023800 	.word	0x40023800
 800441c:	40007000 	.word	0x40007000
 8004420:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004424:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <HAL_RCC_OscConfig+0x4ec>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d028      	beq.n	8004484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d121      	bne.n	8004484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444a:	429a      	cmp	r2, r3
 800444c:	d11a      	bne.n	8004484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004454:	4013      	ands	r3, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800445a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800445c:	4293      	cmp	r3, r2
 800445e:	d111      	bne.n	8004484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446a:	085b      	lsrs	r3, r3, #1
 800446c:	3b01      	subs	r3, #1
 800446e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004470:	429a      	cmp	r2, r3
 8004472:	d107      	bne.n	8004484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800

08004498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0cc      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044ac:	4b68      	ldr	r3, [pc, #416]	@ (8004650 <HAL_RCC_ClockConfig+0x1b8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d90c      	bls.n	80044d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ba:	4b65      	ldr	r3, [pc, #404]	@ (8004650 <HAL_RCC_ClockConfig+0x1b8>)
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	4b63      	ldr	r3, [pc, #396]	@ (8004650 <HAL_RCC_ClockConfig+0x1b8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0b8      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044ec:	4b59      	ldr	r3, [pc, #356]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4a58      	ldr	r2, [pc, #352]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004504:	4b53      	ldr	r3, [pc, #332]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4a52      	ldr	r2, [pc, #328]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800450e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004510:	4b50      	ldr	r3, [pc, #320]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	494d      	ldr	r1, [pc, #308]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	4313      	orrs	r3, r2
 8004520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d044      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d107      	bne.n	8004546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	4b47      	ldr	r3, [pc, #284]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d119      	bne.n	8004576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e07f      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d003      	beq.n	8004556 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004552:	2b03      	cmp	r3, #3
 8004554:	d107      	bne.n	8004566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004556:	4b3f      	ldr	r3, [pc, #252]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e06f      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004566:	4b3b      	ldr	r3, [pc, #236]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e067      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004576:	4b37      	ldr	r3, [pc, #220]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f023 0203 	bic.w	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4934      	ldr	r1, [pc, #208]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	4313      	orrs	r3, r2
 8004586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004588:	f7fc fc7a 	bl	8000e80 <HAL_GetTick>
 800458c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458e:	e00a      	b.n	80045a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004590:	f7fc fc76 	bl	8000e80 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e04f      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 020c 	and.w	r2, r3, #12
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d1eb      	bne.n	8004590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045b8:	4b25      	ldr	r3, [pc, #148]	@ (8004650 <HAL_RCC_ClockConfig+0x1b8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d20c      	bcs.n	80045e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c6:	4b22      	ldr	r3, [pc, #136]	@ (8004650 <HAL_RCC_ClockConfig+0x1b8>)
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ce:	4b20      	ldr	r3, [pc, #128]	@ (8004650 <HAL_RCC_ClockConfig+0x1b8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e032      	b.n	8004646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ec:	4b19      	ldr	r3, [pc, #100]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4916      	ldr	r1, [pc, #88]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800460a:	4b12      	ldr	r3, [pc, #72]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	490e      	ldr	r1, [pc, #56]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800461e:	f000 f821 	bl	8004664 <HAL_RCC_GetSysClockFreq>
 8004622:	4602      	mov	r2, r0
 8004624:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	490a      	ldr	r1, [pc, #40]	@ (8004658 <HAL_RCC_ClockConfig+0x1c0>)
 8004630:	5ccb      	ldrb	r3, [r1, r3]
 8004632:	fa22 f303 	lsr.w	r3, r2, r3
 8004636:	4a09      	ldr	r2, [pc, #36]	@ (800465c <HAL_RCC_ClockConfig+0x1c4>)
 8004638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800463a:	4b09      	ldr	r3, [pc, #36]	@ (8004660 <HAL_RCC_ClockConfig+0x1c8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7fc fbda 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40023c00 	.word	0x40023c00
 8004654:	40023800 	.word	0x40023800
 8004658:	08006074 	.word	0x08006074
 800465c:	20000000 	.word	0x20000000
 8004660:	20000004 	.word	0x20000004

08004664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004668:	b094      	sub	sp, #80	@ 0x50
 800466a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800467c:	4b79      	ldr	r3, [pc, #484]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x200>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 030c 	and.w	r3, r3, #12
 8004684:	2b08      	cmp	r3, #8
 8004686:	d00d      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004688:	2b08      	cmp	r3, #8
 800468a:	f200 80e1 	bhi.w	8004850 <HAL_RCC_GetSysClockFreq+0x1ec>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_RCC_GetSysClockFreq+0x34>
 8004692:	2b04      	cmp	r3, #4
 8004694:	d003      	beq.n	800469e <HAL_RCC_GetSysClockFreq+0x3a>
 8004696:	e0db      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004698:	4b73      	ldr	r3, [pc, #460]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x204>)
 800469a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800469c:	e0db      	b.n	8004856 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800469e:	4b73      	ldr	r3, [pc, #460]	@ (800486c <HAL_RCC_GetSysClockFreq+0x208>)
 80046a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a2:	e0d8      	b.n	8004856 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x200>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d063      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x200>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	2200      	movs	r2, #0
 80046c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80046ce:	2300      	movs	r3, #0
 80046d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046d6:	4622      	mov	r2, r4
 80046d8:	462b      	mov	r3, r5
 80046da:	f04f 0000 	mov.w	r0, #0
 80046de:	f04f 0100 	mov.w	r1, #0
 80046e2:	0159      	lsls	r1, r3, #5
 80046e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e8:	0150      	lsls	r0, r2, #5
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4621      	mov	r1, r4
 80046f0:	1a51      	subs	r1, r2, r1
 80046f2:	6139      	str	r1, [r7, #16]
 80046f4:	4629      	mov	r1, r5
 80046f6:	eb63 0301 	sbc.w	r3, r3, r1
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004708:	4659      	mov	r1, fp
 800470a:	018b      	lsls	r3, r1, #6
 800470c:	4651      	mov	r1, sl
 800470e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004712:	4651      	mov	r1, sl
 8004714:	018a      	lsls	r2, r1, #6
 8004716:	4651      	mov	r1, sl
 8004718:	ebb2 0801 	subs.w	r8, r2, r1
 800471c:	4659      	mov	r1, fp
 800471e:	eb63 0901 	sbc.w	r9, r3, r1
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800472e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004736:	4690      	mov	r8, r2
 8004738:	4699      	mov	r9, r3
 800473a:	4623      	mov	r3, r4
 800473c:	eb18 0303 	adds.w	r3, r8, r3
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	462b      	mov	r3, r5
 8004744:	eb49 0303 	adc.w	r3, r9, r3
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004756:	4629      	mov	r1, r5
 8004758:	024b      	lsls	r3, r1, #9
 800475a:	4621      	mov	r1, r4
 800475c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004760:	4621      	mov	r1, r4
 8004762:	024a      	lsls	r2, r1, #9
 8004764:	4610      	mov	r0, r2
 8004766:	4619      	mov	r1, r3
 8004768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800476a:	2200      	movs	r2, #0
 800476c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800476e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004770:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004774:	f7fb fd84 	bl	8000280 <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4613      	mov	r3, r2
 800477e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004780:	e058      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004782:	4b38      	ldr	r3, [pc, #224]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x200>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	099b      	lsrs	r3, r3, #6
 8004788:	2200      	movs	r2, #0
 800478a:	4618      	mov	r0, r3
 800478c:	4611      	mov	r1, r2
 800478e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004792:	623b      	str	r3, [r7, #32]
 8004794:	2300      	movs	r3, #0
 8004796:	627b      	str	r3, [r7, #36]	@ 0x24
 8004798:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800479c:	4642      	mov	r2, r8
 800479e:	464b      	mov	r3, r9
 80047a0:	f04f 0000 	mov.w	r0, #0
 80047a4:	f04f 0100 	mov.w	r1, #0
 80047a8:	0159      	lsls	r1, r3, #5
 80047aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ae:	0150      	lsls	r0, r2, #5
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4641      	mov	r1, r8
 80047b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ba:	4649      	mov	r1, r9
 80047bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047d4:	ebb2 040a 	subs.w	r4, r2, sl
 80047d8:	eb63 050b 	sbc.w	r5, r3, fp
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	00eb      	lsls	r3, r5, #3
 80047e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ea:	00e2      	lsls	r2, r4, #3
 80047ec:	4614      	mov	r4, r2
 80047ee:	461d      	mov	r5, r3
 80047f0:	4643      	mov	r3, r8
 80047f2:	18e3      	adds	r3, r4, r3
 80047f4:	603b      	str	r3, [r7, #0]
 80047f6:	464b      	mov	r3, r9
 80047f8:	eb45 0303 	adc.w	r3, r5, r3
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9d7 4500 	ldrd	r4, r5, [r7]
 800480a:	4629      	mov	r1, r5
 800480c:	028b      	lsls	r3, r1, #10
 800480e:	4621      	mov	r1, r4
 8004810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004814:	4621      	mov	r1, r4
 8004816:	028a      	lsls	r2, r1, #10
 8004818:	4610      	mov	r0, r2
 800481a:	4619      	mov	r1, r3
 800481c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800481e:	2200      	movs	r2, #0
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	61fa      	str	r2, [r7, #28]
 8004824:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004828:	f7fb fd2a 	bl	8000280 <__aeabi_uldivmod>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4613      	mov	r3, r2
 8004832:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004834:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x200>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	0c1b      	lsrs	r3, r3, #16
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	3301      	adds	r3, #1
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004844:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800484e:	e002      	b.n	8004856 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004850:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x204>)
 8004852:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004858:	4618      	mov	r0, r3
 800485a:	3750      	adds	r7, #80	@ 0x50
 800485c:	46bd      	mov	sp, r7
 800485e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004862:	bf00      	nop
 8004864:	40023800 	.word	0x40023800
 8004868:	00f42400 	.word	0x00f42400
 800486c:	007a1200 	.word	0x007a1200

08004870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004874:	4b03      	ldr	r3, [pc, #12]	@ (8004884 <HAL_RCC_GetHCLKFreq+0x14>)
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000000 	.word	0x20000000

08004888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800488c:	f7ff fff0 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 8004890:	4602      	mov	r2, r0
 8004892:	4b05      	ldr	r3, [pc, #20]	@ (80048a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	0a9b      	lsrs	r3, r3, #10
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4903      	ldr	r1, [pc, #12]	@ (80048ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800489e:	5ccb      	ldrb	r3, [r1, r3]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40023800 	.word	0x40023800
 80048ac:	08006084 	.word	0x08006084

080048b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048b4:	f7ff ffdc 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0b5b      	lsrs	r3, r3, #13
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4903      	ldr	r1, [pc, #12]	@ (80048d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40023800 	.word	0x40023800
 80048d4:	08006084 	.word	0x08006084

080048d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e042      	b.n	8004970 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fc f8ec 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2224      	movs	r2, #36	@ 0x24
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800491a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f973 	bl	8004c08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	@ 0x28
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b20      	cmp	r3, #32
 8004996:	d175      	bne.n	8004a84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_UART_Transmit+0x2c>
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e06e      	b.n	8004a86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2221      	movs	r2, #33	@ 0x21
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b6:	f7fc fa63 	bl	8000e80 <HAL_GetTick>
 80049ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	88fa      	ldrh	r2, [r7, #6]
 80049c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d0:	d108      	bne.n	80049e4 <HAL_UART_Transmit+0x6c>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	e003      	b.n	80049ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049ec:	e02e      	b.n	8004a4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2180      	movs	r1, #128	@ 0x80
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f848 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e03a      	b.n	8004a86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10b      	bne.n	8004a2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	3302      	adds	r3, #2
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	e007      	b.n	8004a3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1cb      	bne.n	80049ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2140      	movs	r1, #64	@ 0x40
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f814 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e006      	b.n	8004a86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	e000      	b.n	8004a86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
  }
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9e:	e03b      	b.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d037      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa8:	f7fc f9ea 	bl	8000e80 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	6a3a      	ldr	r2, [r7, #32]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d302      	bcc.n	8004abe <UART_WaitOnFlagUntilTimeout+0x30>
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e03a      	b.n	8004b38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d023      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b80      	cmp	r3, #128	@ 0x80
 8004ad4:	d020      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b40      	cmp	r3, #64	@ 0x40
 8004ada:	d01d      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d116      	bne.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f81d 	bl	8004b40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e00f      	b.n	8004b38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4013      	ands	r3, r2
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d0b4      	beq.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b095      	sub	sp, #84	@ 0x54
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b68:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e5      	bne.n	8004b48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3314      	adds	r3, #20
 8004b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3314      	adds	r3, #20
 8004b9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d119      	bne.n	8004bec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f023 0310 	bic.w	r3, r3, #16
 8004bce:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bd8:	61ba      	str	r2, [r7, #24]
 8004bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6979      	ldr	r1, [r7, #20]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	613b      	str	r3, [r7, #16]
   return(result);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e5      	bne.n	8004bb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bfa:	bf00      	nop
 8004bfc:	3754      	adds	r7, #84	@ 0x54
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c0c:	b0c0      	sub	sp, #256	@ 0x100
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c24:	68d9      	ldr	r1, [r3, #12]
 8004c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	ea40 0301 	orr.w	r3, r0, r1
 8004c30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c60:	f021 010c 	bic.w	r1, r1, #12
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c82:	6999      	ldr	r1, [r3, #24]
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	ea40 0301 	orr.w	r3, r0, r1
 8004c8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b8f      	ldr	r3, [pc, #572]	@ (8004ed4 <UART_SetConfig+0x2cc>)
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d005      	beq.n	8004ca8 <UART_SetConfig+0xa0>
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b8d      	ldr	r3, [pc, #564]	@ (8004ed8 <UART_SetConfig+0x2d0>)
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d104      	bne.n	8004cb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ca8:	f7ff fe02 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8004cac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004cb0:	e003      	b.n	8004cba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cb2:	f7ff fde9 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8004cb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cc4:	f040 810c 	bne.w	8004ee0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004cd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004cda:	4622      	mov	r2, r4
 8004cdc:	462b      	mov	r3, r5
 8004cde:	1891      	adds	r1, r2, r2
 8004ce0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ce2:	415b      	adcs	r3, r3
 8004ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ce6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cea:	4621      	mov	r1, r4
 8004cec:	eb12 0801 	adds.w	r8, r2, r1
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	eb43 0901 	adc.w	r9, r3, r1
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d0a:	4690      	mov	r8, r2
 8004d0c:	4699      	mov	r9, r3
 8004d0e:	4623      	mov	r3, r4
 8004d10:	eb18 0303 	adds.w	r3, r8, r3
 8004d14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d18:	462b      	mov	r3, r5
 8004d1a:	eb49 0303 	adc.w	r3, r9, r3
 8004d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d36:	460b      	mov	r3, r1
 8004d38:	18db      	adds	r3, r3, r3
 8004d3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	eb42 0303 	adc.w	r3, r2, r3
 8004d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d4c:	f7fb fa98 	bl	8000280 <__aeabi_uldivmod>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4b61      	ldr	r3, [pc, #388]	@ (8004edc <UART_SetConfig+0x2d4>)
 8004d56:	fba3 2302 	umull	r2, r3, r3, r2
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	011c      	lsls	r4, r3, #4
 8004d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d70:	4642      	mov	r2, r8
 8004d72:	464b      	mov	r3, r9
 8004d74:	1891      	adds	r1, r2, r2
 8004d76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d78:	415b      	adcs	r3, r3
 8004d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d80:	4641      	mov	r1, r8
 8004d82:	eb12 0a01 	adds.w	sl, r2, r1
 8004d86:	4649      	mov	r1, r9
 8004d88:	eb43 0b01 	adc.w	fp, r3, r1
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004da0:	4692      	mov	sl, r2
 8004da2:	469b      	mov	fp, r3
 8004da4:	4643      	mov	r3, r8
 8004da6:	eb1a 0303 	adds.w	r3, sl, r3
 8004daa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dae:	464b      	mov	r3, r9
 8004db0:	eb4b 0303 	adc.w	r3, fp, r3
 8004db4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004dc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	18db      	adds	r3, r3, r3
 8004dd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	eb42 0303 	adc.w	r3, r2, r3
 8004dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004dde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004de2:	f7fb fa4d 	bl	8000280 <__aeabi_uldivmod>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	4b3b      	ldr	r3, [pc, #236]	@ (8004edc <UART_SetConfig+0x2d4>)
 8004dee:	fba3 2301 	umull	r2, r3, r3, r1
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	2264      	movs	r2, #100	@ 0x64
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	1acb      	subs	r3, r1, r3
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e02:	4b36      	ldr	r3, [pc, #216]	@ (8004edc <UART_SetConfig+0x2d4>)
 8004e04:	fba3 2302 	umull	r2, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e10:	441c      	add	r4, r3
 8004e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e24:	4642      	mov	r2, r8
 8004e26:	464b      	mov	r3, r9
 8004e28:	1891      	adds	r1, r2, r2
 8004e2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e2c:	415b      	adcs	r3, r3
 8004e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e34:	4641      	mov	r1, r8
 8004e36:	1851      	adds	r1, r2, r1
 8004e38:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	414b      	adcs	r3, r1
 8004e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e4c:	4659      	mov	r1, fp
 8004e4e:	00cb      	lsls	r3, r1, #3
 8004e50:	4651      	mov	r1, sl
 8004e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e56:	4651      	mov	r1, sl
 8004e58:	00ca      	lsls	r2, r1, #3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4642      	mov	r2, r8
 8004e62:	189b      	adds	r3, r3, r2
 8004e64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e68:	464b      	mov	r3, r9
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	eb42 0303 	adc.w	r3, r2, r3
 8004e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e88:	460b      	mov	r3, r1
 8004e8a:	18db      	adds	r3, r3, r3
 8004e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e8e:	4613      	mov	r3, r2
 8004e90:	eb42 0303 	adc.w	r3, r2, r3
 8004e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e9e:	f7fb f9ef 	bl	8000280 <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8004edc <UART_SetConfig+0x2d4>)
 8004ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	2164      	movs	r1, #100	@ 0x64
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	3332      	adds	r3, #50	@ 0x32
 8004eba:	4a08      	ldr	r2, [pc, #32]	@ (8004edc <UART_SetConfig+0x2d4>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	f003 0207 	and.w	r2, r3, #7
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4422      	add	r2, r4
 8004ece:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ed0:	e106      	b.n	80050e0 <UART_SetConfig+0x4d8>
 8004ed2:	bf00      	nop
 8004ed4:	40011000 	.word	0x40011000
 8004ed8:	40011400 	.word	0x40011400
 8004edc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004eea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004eee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ef2:	4642      	mov	r2, r8
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	1891      	adds	r1, r2, r2
 8004ef8:	6239      	str	r1, [r7, #32]
 8004efa:	415b      	adcs	r3, r3
 8004efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004efe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f02:	4641      	mov	r1, r8
 8004f04:	1854      	adds	r4, r2, r1
 8004f06:	4649      	mov	r1, r9
 8004f08:	eb43 0501 	adc.w	r5, r3, r1
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	00eb      	lsls	r3, r5, #3
 8004f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f1a:	00e2      	lsls	r2, r4, #3
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	461d      	mov	r5, r3
 8004f20:	4643      	mov	r3, r8
 8004f22:	18e3      	adds	r3, r4, r3
 8004f24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f28:	464b      	mov	r3, r9
 8004f2a:	eb45 0303 	adc.w	r3, r5, r3
 8004f2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f4e:	4629      	mov	r1, r5
 8004f50:	008b      	lsls	r3, r1, #2
 8004f52:	4621      	mov	r1, r4
 8004f54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f58:	4621      	mov	r1, r4
 8004f5a:	008a      	lsls	r2, r1, #2
 8004f5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f60:	f7fb f98e 	bl	8000280 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4b60      	ldr	r3, [pc, #384]	@ (80050ec <UART_SetConfig+0x4e4>)
 8004f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	011c      	lsls	r4, r3, #4
 8004f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	1891      	adds	r1, r2, r2
 8004f8a:	61b9      	str	r1, [r7, #24]
 8004f8c:	415b      	adcs	r3, r3
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f94:	4641      	mov	r1, r8
 8004f96:	1851      	adds	r1, r2, r1
 8004f98:	6139      	str	r1, [r7, #16]
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	414b      	adcs	r3, r1
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fac:	4659      	mov	r1, fp
 8004fae:	00cb      	lsls	r3, r1, #3
 8004fb0:	4651      	mov	r1, sl
 8004fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fb6:	4651      	mov	r1, sl
 8004fb8:	00ca      	lsls	r2, r1, #3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	189b      	adds	r3, r3, r2
 8004fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fc8:	464b      	mov	r3, r9
 8004fca:	460a      	mov	r2, r1
 8004fcc:	eb42 0303 	adc.w	r3, r2, r3
 8004fd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fec:	4649      	mov	r1, r9
 8004fee:	008b      	lsls	r3, r1, #2
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	008a      	lsls	r2, r1, #2
 8004ffa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ffe:	f7fb f93f 	bl	8000280 <__aeabi_uldivmod>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4611      	mov	r1, r2
 8005008:	4b38      	ldr	r3, [pc, #224]	@ (80050ec <UART_SetConfig+0x4e4>)
 800500a:	fba3 2301 	umull	r2, r3, r3, r1
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	2264      	movs	r2, #100	@ 0x64
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	1acb      	subs	r3, r1, r3
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	3332      	adds	r3, #50	@ 0x32
 800501c:	4a33      	ldr	r2, [pc, #204]	@ (80050ec <UART_SetConfig+0x4e4>)
 800501e:	fba2 2303 	umull	r2, r3, r2, r3
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005028:	441c      	add	r4, r3
 800502a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800502e:	2200      	movs	r2, #0
 8005030:	673b      	str	r3, [r7, #112]	@ 0x70
 8005032:	677a      	str	r2, [r7, #116]	@ 0x74
 8005034:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	1891      	adds	r1, r2, r2
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	415b      	adcs	r3, r3
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005048:	4641      	mov	r1, r8
 800504a:	1851      	adds	r1, r2, r1
 800504c:	6039      	str	r1, [r7, #0]
 800504e:	4649      	mov	r1, r9
 8005050:	414b      	adcs	r3, r1
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005060:	4659      	mov	r1, fp
 8005062:	00cb      	lsls	r3, r1, #3
 8005064:	4651      	mov	r1, sl
 8005066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506a:	4651      	mov	r1, sl
 800506c:	00ca      	lsls	r2, r1, #3
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	4603      	mov	r3, r0
 8005074:	4642      	mov	r2, r8
 8005076:	189b      	adds	r3, r3, r2
 8005078:	66bb      	str	r3, [r7, #104]	@ 0x68
 800507a:	464b      	mov	r3, r9
 800507c:	460a      	mov	r2, r1
 800507e:	eb42 0303 	adc.w	r3, r2, r3
 8005082:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	663b      	str	r3, [r7, #96]	@ 0x60
 800508e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800509c:	4649      	mov	r1, r9
 800509e:	008b      	lsls	r3, r1, #2
 80050a0:	4641      	mov	r1, r8
 80050a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a6:	4641      	mov	r1, r8
 80050a8:	008a      	lsls	r2, r1, #2
 80050aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050ae:	f7fb f8e7 	bl	8000280 <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4b0d      	ldr	r3, [pc, #52]	@ (80050ec <UART_SetConfig+0x4e4>)
 80050b8:	fba3 1302 	umull	r1, r3, r3, r2
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	2164      	movs	r1, #100	@ 0x64
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	3332      	adds	r3, #50	@ 0x32
 80050ca:	4a08      	ldr	r2, [pc, #32]	@ (80050ec <UART_SetConfig+0x4e4>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	f003 020f 	and.w	r2, r3, #15
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4422      	add	r2, r4
 80050de:	609a      	str	r2, [r3, #8]
}
 80050e0:	bf00      	nop
 80050e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050e6:	46bd      	mov	sp, r7
 80050e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ec:	51eb851f 	.word	0x51eb851f

080050f0 <std>:
 80050f0:	2300      	movs	r3, #0
 80050f2:	b510      	push	{r4, lr}
 80050f4:	4604      	mov	r4, r0
 80050f6:	e9c0 3300 	strd	r3, r3, [r0]
 80050fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050fe:	6083      	str	r3, [r0, #8]
 8005100:	8181      	strh	r1, [r0, #12]
 8005102:	6643      	str	r3, [r0, #100]	@ 0x64
 8005104:	81c2      	strh	r2, [r0, #14]
 8005106:	6183      	str	r3, [r0, #24]
 8005108:	4619      	mov	r1, r3
 800510a:	2208      	movs	r2, #8
 800510c:	305c      	adds	r0, #92	@ 0x5c
 800510e:	f000 f9f9 	bl	8005504 <memset>
 8005112:	4b0d      	ldr	r3, [pc, #52]	@ (8005148 <std+0x58>)
 8005114:	6263      	str	r3, [r4, #36]	@ 0x24
 8005116:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <std+0x5c>)
 8005118:	62a3      	str	r3, [r4, #40]	@ 0x28
 800511a:	4b0d      	ldr	r3, [pc, #52]	@ (8005150 <std+0x60>)
 800511c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800511e:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <std+0x64>)
 8005120:	6323      	str	r3, [r4, #48]	@ 0x30
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <std+0x68>)
 8005124:	6224      	str	r4, [r4, #32]
 8005126:	429c      	cmp	r4, r3
 8005128:	d006      	beq.n	8005138 <std+0x48>
 800512a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800512e:	4294      	cmp	r4, r2
 8005130:	d002      	beq.n	8005138 <std+0x48>
 8005132:	33d0      	adds	r3, #208	@ 0xd0
 8005134:	429c      	cmp	r4, r3
 8005136:	d105      	bne.n	8005144 <std+0x54>
 8005138:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005140:	f000 ba58 	b.w	80055f4 <__retarget_lock_init_recursive>
 8005144:	bd10      	pop	{r4, pc}
 8005146:	bf00      	nop
 8005148:	08005355 	.word	0x08005355
 800514c:	08005377 	.word	0x08005377
 8005150:	080053af 	.word	0x080053af
 8005154:	080053d3 	.word	0x080053d3
 8005158:	20000184 	.word	0x20000184

0800515c <stdio_exit_handler>:
 800515c:	4a02      	ldr	r2, [pc, #8]	@ (8005168 <stdio_exit_handler+0xc>)
 800515e:	4903      	ldr	r1, [pc, #12]	@ (800516c <stdio_exit_handler+0x10>)
 8005160:	4803      	ldr	r0, [pc, #12]	@ (8005170 <stdio_exit_handler+0x14>)
 8005162:	f000 b869 	b.w	8005238 <_fwalk_sglue>
 8005166:	bf00      	nop
 8005168:	2000000c 	.word	0x2000000c
 800516c:	08005e91 	.word	0x08005e91
 8005170:	2000001c 	.word	0x2000001c

08005174 <cleanup_stdio>:
 8005174:	6841      	ldr	r1, [r0, #4]
 8005176:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <cleanup_stdio+0x34>)
 8005178:	4299      	cmp	r1, r3
 800517a:	b510      	push	{r4, lr}
 800517c:	4604      	mov	r4, r0
 800517e:	d001      	beq.n	8005184 <cleanup_stdio+0x10>
 8005180:	f000 fe86 	bl	8005e90 <_fflush_r>
 8005184:	68a1      	ldr	r1, [r4, #8]
 8005186:	4b09      	ldr	r3, [pc, #36]	@ (80051ac <cleanup_stdio+0x38>)
 8005188:	4299      	cmp	r1, r3
 800518a:	d002      	beq.n	8005192 <cleanup_stdio+0x1e>
 800518c:	4620      	mov	r0, r4
 800518e:	f000 fe7f 	bl	8005e90 <_fflush_r>
 8005192:	68e1      	ldr	r1, [r4, #12]
 8005194:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <cleanup_stdio+0x3c>)
 8005196:	4299      	cmp	r1, r3
 8005198:	d004      	beq.n	80051a4 <cleanup_stdio+0x30>
 800519a:	4620      	mov	r0, r4
 800519c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a0:	f000 be76 	b.w	8005e90 <_fflush_r>
 80051a4:	bd10      	pop	{r4, pc}
 80051a6:	bf00      	nop
 80051a8:	20000184 	.word	0x20000184
 80051ac:	200001ec 	.word	0x200001ec
 80051b0:	20000254 	.word	0x20000254

080051b4 <global_stdio_init.part.0>:
 80051b4:	b510      	push	{r4, lr}
 80051b6:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <global_stdio_init.part.0+0x30>)
 80051b8:	4c0b      	ldr	r4, [pc, #44]	@ (80051e8 <global_stdio_init.part.0+0x34>)
 80051ba:	4a0c      	ldr	r2, [pc, #48]	@ (80051ec <global_stdio_init.part.0+0x38>)
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	4620      	mov	r0, r4
 80051c0:	2200      	movs	r2, #0
 80051c2:	2104      	movs	r1, #4
 80051c4:	f7ff ff94 	bl	80050f0 <std>
 80051c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051cc:	2201      	movs	r2, #1
 80051ce:	2109      	movs	r1, #9
 80051d0:	f7ff ff8e 	bl	80050f0 <std>
 80051d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051d8:	2202      	movs	r2, #2
 80051da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051de:	2112      	movs	r1, #18
 80051e0:	f7ff bf86 	b.w	80050f0 <std>
 80051e4:	200002bc 	.word	0x200002bc
 80051e8:	20000184 	.word	0x20000184
 80051ec:	0800515d 	.word	0x0800515d

080051f0 <__sfp_lock_acquire>:
 80051f0:	4801      	ldr	r0, [pc, #4]	@ (80051f8 <__sfp_lock_acquire+0x8>)
 80051f2:	f000 ba00 	b.w	80055f6 <__retarget_lock_acquire_recursive>
 80051f6:	bf00      	nop
 80051f8:	200002c5 	.word	0x200002c5

080051fc <__sfp_lock_release>:
 80051fc:	4801      	ldr	r0, [pc, #4]	@ (8005204 <__sfp_lock_release+0x8>)
 80051fe:	f000 b9fb 	b.w	80055f8 <__retarget_lock_release_recursive>
 8005202:	bf00      	nop
 8005204:	200002c5 	.word	0x200002c5

08005208 <__sinit>:
 8005208:	b510      	push	{r4, lr}
 800520a:	4604      	mov	r4, r0
 800520c:	f7ff fff0 	bl	80051f0 <__sfp_lock_acquire>
 8005210:	6a23      	ldr	r3, [r4, #32]
 8005212:	b11b      	cbz	r3, 800521c <__sinit+0x14>
 8005214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005218:	f7ff bff0 	b.w	80051fc <__sfp_lock_release>
 800521c:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <__sinit+0x28>)
 800521e:	6223      	str	r3, [r4, #32]
 8005220:	4b04      	ldr	r3, [pc, #16]	@ (8005234 <__sinit+0x2c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f5      	bne.n	8005214 <__sinit+0xc>
 8005228:	f7ff ffc4 	bl	80051b4 <global_stdio_init.part.0>
 800522c:	e7f2      	b.n	8005214 <__sinit+0xc>
 800522e:	bf00      	nop
 8005230:	08005175 	.word	0x08005175
 8005234:	200002bc 	.word	0x200002bc

08005238 <_fwalk_sglue>:
 8005238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800523c:	4607      	mov	r7, r0
 800523e:	4688      	mov	r8, r1
 8005240:	4614      	mov	r4, r2
 8005242:	2600      	movs	r6, #0
 8005244:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005248:	f1b9 0901 	subs.w	r9, r9, #1
 800524c:	d505      	bpl.n	800525a <_fwalk_sglue+0x22>
 800524e:	6824      	ldr	r4, [r4, #0]
 8005250:	2c00      	cmp	r4, #0
 8005252:	d1f7      	bne.n	8005244 <_fwalk_sglue+0xc>
 8005254:	4630      	mov	r0, r6
 8005256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800525a:	89ab      	ldrh	r3, [r5, #12]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d907      	bls.n	8005270 <_fwalk_sglue+0x38>
 8005260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005264:	3301      	adds	r3, #1
 8005266:	d003      	beq.n	8005270 <_fwalk_sglue+0x38>
 8005268:	4629      	mov	r1, r5
 800526a:	4638      	mov	r0, r7
 800526c:	47c0      	blx	r8
 800526e:	4306      	orrs	r6, r0
 8005270:	3568      	adds	r5, #104	@ 0x68
 8005272:	e7e9      	b.n	8005248 <_fwalk_sglue+0x10>

08005274 <iprintf>:
 8005274:	b40f      	push	{r0, r1, r2, r3}
 8005276:	b507      	push	{r0, r1, r2, lr}
 8005278:	4906      	ldr	r1, [pc, #24]	@ (8005294 <iprintf+0x20>)
 800527a:	ab04      	add	r3, sp, #16
 800527c:	6808      	ldr	r0, [r1, #0]
 800527e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005282:	6881      	ldr	r1, [r0, #8]
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	f000 fadb 	bl	8005840 <_vfiprintf_r>
 800528a:	b003      	add	sp, #12
 800528c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005290:	b004      	add	sp, #16
 8005292:	4770      	bx	lr
 8005294:	20000018 	.word	0x20000018

08005298 <_puts_r>:
 8005298:	6a03      	ldr	r3, [r0, #32]
 800529a:	b570      	push	{r4, r5, r6, lr}
 800529c:	6884      	ldr	r4, [r0, #8]
 800529e:	4605      	mov	r5, r0
 80052a0:	460e      	mov	r6, r1
 80052a2:	b90b      	cbnz	r3, 80052a8 <_puts_r+0x10>
 80052a4:	f7ff ffb0 	bl	8005208 <__sinit>
 80052a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052aa:	07db      	lsls	r3, r3, #31
 80052ac:	d405      	bmi.n	80052ba <_puts_r+0x22>
 80052ae:	89a3      	ldrh	r3, [r4, #12]
 80052b0:	0598      	lsls	r0, r3, #22
 80052b2:	d402      	bmi.n	80052ba <_puts_r+0x22>
 80052b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052b6:	f000 f99e 	bl	80055f6 <__retarget_lock_acquire_recursive>
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	0719      	lsls	r1, r3, #28
 80052be:	d502      	bpl.n	80052c6 <_puts_r+0x2e>
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d135      	bne.n	8005332 <_puts_r+0x9a>
 80052c6:	4621      	mov	r1, r4
 80052c8:	4628      	mov	r0, r5
 80052ca:	f000 f8c5 	bl	8005458 <__swsetup_r>
 80052ce:	b380      	cbz	r0, 8005332 <_puts_r+0x9a>
 80052d0:	f04f 35ff 	mov.w	r5, #4294967295
 80052d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052d6:	07da      	lsls	r2, r3, #31
 80052d8:	d405      	bmi.n	80052e6 <_puts_r+0x4e>
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	059b      	lsls	r3, r3, #22
 80052de:	d402      	bmi.n	80052e6 <_puts_r+0x4e>
 80052e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052e2:	f000 f989 	bl	80055f8 <__retarget_lock_release_recursive>
 80052e6:	4628      	mov	r0, r5
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	da04      	bge.n	80052f8 <_puts_r+0x60>
 80052ee:	69a2      	ldr	r2, [r4, #24]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	dc17      	bgt.n	8005324 <_puts_r+0x8c>
 80052f4:	290a      	cmp	r1, #10
 80052f6:	d015      	beq.n	8005324 <_puts_r+0x8c>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	6022      	str	r2, [r4, #0]
 80052fe:	7019      	strb	r1, [r3, #0]
 8005300:	68a3      	ldr	r3, [r4, #8]
 8005302:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005306:	3b01      	subs	r3, #1
 8005308:	60a3      	str	r3, [r4, #8]
 800530a:	2900      	cmp	r1, #0
 800530c:	d1ed      	bne.n	80052ea <_puts_r+0x52>
 800530e:	2b00      	cmp	r3, #0
 8005310:	da11      	bge.n	8005336 <_puts_r+0x9e>
 8005312:	4622      	mov	r2, r4
 8005314:	210a      	movs	r1, #10
 8005316:	4628      	mov	r0, r5
 8005318:	f000 f85f 	bl	80053da <__swbuf_r>
 800531c:	3001      	adds	r0, #1
 800531e:	d0d7      	beq.n	80052d0 <_puts_r+0x38>
 8005320:	250a      	movs	r5, #10
 8005322:	e7d7      	b.n	80052d4 <_puts_r+0x3c>
 8005324:	4622      	mov	r2, r4
 8005326:	4628      	mov	r0, r5
 8005328:	f000 f857 	bl	80053da <__swbuf_r>
 800532c:	3001      	adds	r0, #1
 800532e:	d1e7      	bne.n	8005300 <_puts_r+0x68>
 8005330:	e7ce      	b.n	80052d0 <_puts_r+0x38>
 8005332:	3e01      	subs	r6, #1
 8005334:	e7e4      	b.n	8005300 <_puts_r+0x68>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	6022      	str	r2, [r4, #0]
 800533c:	220a      	movs	r2, #10
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e7ee      	b.n	8005320 <_puts_r+0x88>
	...

08005344 <puts>:
 8005344:	4b02      	ldr	r3, [pc, #8]	@ (8005350 <puts+0xc>)
 8005346:	4601      	mov	r1, r0
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	f7ff bfa5 	b.w	8005298 <_puts_r>
 800534e:	bf00      	nop
 8005350:	20000018 	.word	0x20000018

08005354 <__sread>:
 8005354:	b510      	push	{r4, lr}
 8005356:	460c      	mov	r4, r1
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	f000 f8fc 	bl	8005558 <_read_r>
 8005360:	2800      	cmp	r0, #0
 8005362:	bfab      	itete	ge
 8005364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005366:	89a3      	ldrhlt	r3, [r4, #12]
 8005368:	181b      	addge	r3, r3, r0
 800536a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800536e:	bfac      	ite	ge
 8005370:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005372:	81a3      	strhlt	r3, [r4, #12]
 8005374:	bd10      	pop	{r4, pc}

08005376 <__swrite>:
 8005376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800537a:	461f      	mov	r7, r3
 800537c:	898b      	ldrh	r3, [r1, #12]
 800537e:	05db      	lsls	r3, r3, #23
 8005380:	4605      	mov	r5, r0
 8005382:	460c      	mov	r4, r1
 8005384:	4616      	mov	r6, r2
 8005386:	d505      	bpl.n	8005394 <__swrite+0x1e>
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	2302      	movs	r3, #2
 800538e:	2200      	movs	r2, #0
 8005390:	f000 f8d0 	bl	8005534 <_lseek_r>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800539a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800539e:	81a3      	strh	r3, [r4, #12]
 80053a0:	4632      	mov	r2, r6
 80053a2:	463b      	mov	r3, r7
 80053a4:	4628      	mov	r0, r5
 80053a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053aa:	f000 b8e7 	b.w	800557c <_write_r>

080053ae <__sseek>:
 80053ae:	b510      	push	{r4, lr}
 80053b0:	460c      	mov	r4, r1
 80053b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b6:	f000 f8bd 	bl	8005534 <_lseek_r>
 80053ba:	1c43      	adds	r3, r0, #1
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	bf15      	itete	ne
 80053c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053ca:	81a3      	strheq	r3, [r4, #12]
 80053cc:	bf18      	it	ne
 80053ce:	81a3      	strhne	r3, [r4, #12]
 80053d0:	bd10      	pop	{r4, pc}

080053d2 <__sclose>:
 80053d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d6:	f000 b89d 	b.w	8005514 <_close_r>

080053da <__swbuf_r>:
 80053da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053dc:	460e      	mov	r6, r1
 80053de:	4614      	mov	r4, r2
 80053e0:	4605      	mov	r5, r0
 80053e2:	b118      	cbz	r0, 80053ec <__swbuf_r+0x12>
 80053e4:	6a03      	ldr	r3, [r0, #32]
 80053e6:	b90b      	cbnz	r3, 80053ec <__swbuf_r+0x12>
 80053e8:	f7ff ff0e 	bl	8005208 <__sinit>
 80053ec:	69a3      	ldr	r3, [r4, #24]
 80053ee:	60a3      	str	r3, [r4, #8]
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	071a      	lsls	r2, r3, #28
 80053f4:	d501      	bpl.n	80053fa <__swbuf_r+0x20>
 80053f6:	6923      	ldr	r3, [r4, #16]
 80053f8:	b943      	cbnz	r3, 800540c <__swbuf_r+0x32>
 80053fa:	4621      	mov	r1, r4
 80053fc:	4628      	mov	r0, r5
 80053fe:	f000 f82b 	bl	8005458 <__swsetup_r>
 8005402:	b118      	cbz	r0, 800540c <__swbuf_r+0x32>
 8005404:	f04f 37ff 	mov.w	r7, #4294967295
 8005408:	4638      	mov	r0, r7
 800540a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	6922      	ldr	r2, [r4, #16]
 8005410:	1a98      	subs	r0, r3, r2
 8005412:	6963      	ldr	r3, [r4, #20]
 8005414:	b2f6      	uxtb	r6, r6
 8005416:	4283      	cmp	r3, r0
 8005418:	4637      	mov	r7, r6
 800541a:	dc05      	bgt.n	8005428 <__swbuf_r+0x4e>
 800541c:	4621      	mov	r1, r4
 800541e:	4628      	mov	r0, r5
 8005420:	f000 fd36 	bl	8005e90 <_fflush_r>
 8005424:	2800      	cmp	r0, #0
 8005426:	d1ed      	bne.n	8005404 <__swbuf_r+0x2a>
 8005428:	68a3      	ldr	r3, [r4, #8]
 800542a:	3b01      	subs	r3, #1
 800542c:	60a3      	str	r3, [r4, #8]
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	6022      	str	r2, [r4, #0]
 8005434:	701e      	strb	r6, [r3, #0]
 8005436:	6962      	ldr	r2, [r4, #20]
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	429a      	cmp	r2, r3
 800543c:	d004      	beq.n	8005448 <__swbuf_r+0x6e>
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	07db      	lsls	r3, r3, #31
 8005442:	d5e1      	bpl.n	8005408 <__swbuf_r+0x2e>
 8005444:	2e0a      	cmp	r6, #10
 8005446:	d1df      	bne.n	8005408 <__swbuf_r+0x2e>
 8005448:	4621      	mov	r1, r4
 800544a:	4628      	mov	r0, r5
 800544c:	f000 fd20 	bl	8005e90 <_fflush_r>
 8005450:	2800      	cmp	r0, #0
 8005452:	d0d9      	beq.n	8005408 <__swbuf_r+0x2e>
 8005454:	e7d6      	b.n	8005404 <__swbuf_r+0x2a>
	...

08005458 <__swsetup_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4b29      	ldr	r3, [pc, #164]	@ (8005500 <__swsetup_r+0xa8>)
 800545c:	4605      	mov	r5, r0
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	460c      	mov	r4, r1
 8005462:	b118      	cbz	r0, 800546c <__swsetup_r+0x14>
 8005464:	6a03      	ldr	r3, [r0, #32]
 8005466:	b90b      	cbnz	r3, 800546c <__swsetup_r+0x14>
 8005468:	f7ff fece 	bl	8005208 <__sinit>
 800546c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005470:	0719      	lsls	r1, r3, #28
 8005472:	d422      	bmi.n	80054ba <__swsetup_r+0x62>
 8005474:	06da      	lsls	r2, r3, #27
 8005476:	d407      	bmi.n	8005488 <__swsetup_r+0x30>
 8005478:	2209      	movs	r2, #9
 800547a:	602a      	str	r2, [r5, #0]
 800547c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005480:	81a3      	strh	r3, [r4, #12]
 8005482:	f04f 30ff 	mov.w	r0, #4294967295
 8005486:	e033      	b.n	80054f0 <__swsetup_r+0x98>
 8005488:	0758      	lsls	r0, r3, #29
 800548a:	d512      	bpl.n	80054b2 <__swsetup_r+0x5a>
 800548c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800548e:	b141      	cbz	r1, 80054a2 <__swsetup_r+0x4a>
 8005490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005494:	4299      	cmp	r1, r3
 8005496:	d002      	beq.n	800549e <__swsetup_r+0x46>
 8005498:	4628      	mov	r0, r5
 800549a:	f000 f8af 	bl	80055fc <_free_r>
 800549e:	2300      	movs	r3, #0
 80054a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80054a8:	81a3      	strh	r3, [r4, #12]
 80054aa:	2300      	movs	r3, #0
 80054ac:	6063      	str	r3, [r4, #4]
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	f043 0308 	orr.w	r3, r3, #8
 80054b8:	81a3      	strh	r3, [r4, #12]
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	b94b      	cbnz	r3, 80054d2 <__swsetup_r+0x7a>
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c8:	d003      	beq.n	80054d2 <__swsetup_r+0x7a>
 80054ca:	4621      	mov	r1, r4
 80054cc:	4628      	mov	r0, r5
 80054ce:	f000 fd2d 	bl	8005f2c <__smakebuf_r>
 80054d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d6:	f013 0201 	ands.w	r2, r3, #1
 80054da:	d00a      	beq.n	80054f2 <__swsetup_r+0x9a>
 80054dc:	2200      	movs	r2, #0
 80054de:	60a2      	str	r2, [r4, #8]
 80054e0:	6962      	ldr	r2, [r4, #20]
 80054e2:	4252      	negs	r2, r2
 80054e4:	61a2      	str	r2, [r4, #24]
 80054e6:	6922      	ldr	r2, [r4, #16]
 80054e8:	b942      	cbnz	r2, 80054fc <__swsetup_r+0xa4>
 80054ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054ee:	d1c5      	bne.n	800547c <__swsetup_r+0x24>
 80054f0:	bd38      	pop	{r3, r4, r5, pc}
 80054f2:	0799      	lsls	r1, r3, #30
 80054f4:	bf58      	it	pl
 80054f6:	6962      	ldrpl	r2, [r4, #20]
 80054f8:	60a2      	str	r2, [r4, #8]
 80054fa:	e7f4      	b.n	80054e6 <__swsetup_r+0x8e>
 80054fc:	2000      	movs	r0, #0
 80054fe:	e7f7      	b.n	80054f0 <__swsetup_r+0x98>
 8005500:	20000018 	.word	0x20000018

08005504 <memset>:
 8005504:	4402      	add	r2, r0
 8005506:	4603      	mov	r3, r0
 8005508:	4293      	cmp	r3, r2
 800550a:	d100      	bne.n	800550e <memset+0xa>
 800550c:	4770      	bx	lr
 800550e:	f803 1b01 	strb.w	r1, [r3], #1
 8005512:	e7f9      	b.n	8005508 <memset+0x4>

08005514 <_close_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	4d06      	ldr	r5, [pc, #24]	@ (8005530 <_close_r+0x1c>)
 8005518:	2300      	movs	r3, #0
 800551a:	4604      	mov	r4, r0
 800551c:	4608      	mov	r0, r1
 800551e:	602b      	str	r3, [r5, #0]
 8005520:	f7fb fba1 	bl	8000c66 <_close>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_close_r+0x1a>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_close_r+0x1a>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	200002c0 	.word	0x200002c0

08005534 <_lseek_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	4d07      	ldr	r5, [pc, #28]	@ (8005554 <_lseek_r+0x20>)
 8005538:	4604      	mov	r4, r0
 800553a:	4608      	mov	r0, r1
 800553c:	4611      	mov	r1, r2
 800553e:	2200      	movs	r2, #0
 8005540:	602a      	str	r2, [r5, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	f7fb fbb6 	bl	8000cb4 <_lseek>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_lseek_r+0x1e>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_lseek_r+0x1e>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	200002c0 	.word	0x200002c0

08005558 <_read_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d07      	ldr	r5, [pc, #28]	@ (8005578 <_read_r+0x20>)
 800555c:	4604      	mov	r4, r0
 800555e:	4608      	mov	r0, r1
 8005560:	4611      	mov	r1, r2
 8005562:	2200      	movs	r2, #0
 8005564:	602a      	str	r2, [r5, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f7fb fb44 	bl	8000bf4 <_read>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_read_r+0x1e>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_read_r+0x1e>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	200002c0 	.word	0x200002c0

0800557c <_write_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d07      	ldr	r5, [pc, #28]	@ (800559c <_write_r+0x20>)
 8005580:	4604      	mov	r4, r0
 8005582:	4608      	mov	r0, r1
 8005584:	4611      	mov	r1, r2
 8005586:	2200      	movs	r2, #0
 8005588:	602a      	str	r2, [r5, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fb fb4f 	bl	8000c2e <_write>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_write_r+0x1e>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_write_r+0x1e>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	200002c0 	.word	0x200002c0

080055a0 <__errno>:
 80055a0:	4b01      	ldr	r3, [pc, #4]	@ (80055a8 <__errno+0x8>)
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20000018 	.word	0x20000018

080055ac <__libc_init_array>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	4d0d      	ldr	r5, [pc, #52]	@ (80055e4 <__libc_init_array+0x38>)
 80055b0:	4c0d      	ldr	r4, [pc, #52]	@ (80055e8 <__libc_init_array+0x3c>)
 80055b2:	1b64      	subs	r4, r4, r5
 80055b4:	10a4      	asrs	r4, r4, #2
 80055b6:	2600      	movs	r6, #0
 80055b8:	42a6      	cmp	r6, r4
 80055ba:	d109      	bne.n	80055d0 <__libc_init_array+0x24>
 80055bc:	4d0b      	ldr	r5, [pc, #44]	@ (80055ec <__libc_init_array+0x40>)
 80055be:	4c0c      	ldr	r4, [pc, #48]	@ (80055f0 <__libc_init_array+0x44>)
 80055c0:	f000 fd22 	bl	8006008 <_init>
 80055c4:	1b64      	subs	r4, r4, r5
 80055c6:	10a4      	asrs	r4, r4, #2
 80055c8:	2600      	movs	r6, #0
 80055ca:	42a6      	cmp	r6, r4
 80055cc:	d105      	bne.n	80055da <__libc_init_array+0x2e>
 80055ce:	bd70      	pop	{r4, r5, r6, pc}
 80055d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d4:	4798      	blx	r3
 80055d6:	3601      	adds	r6, #1
 80055d8:	e7ee      	b.n	80055b8 <__libc_init_array+0xc>
 80055da:	f855 3b04 	ldr.w	r3, [r5], #4
 80055de:	4798      	blx	r3
 80055e0:	3601      	adds	r6, #1
 80055e2:	e7f2      	b.n	80055ca <__libc_init_array+0x1e>
 80055e4:	080060c8 	.word	0x080060c8
 80055e8:	080060c8 	.word	0x080060c8
 80055ec:	080060c8 	.word	0x080060c8
 80055f0:	080060cc 	.word	0x080060cc

080055f4 <__retarget_lock_init_recursive>:
 80055f4:	4770      	bx	lr

080055f6 <__retarget_lock_acquire_recursive>:
 80055f6:	4770      	bx	lr

080055f8 <__retarget_lock_release_recursive>:
 80055f8:	4770      	bx	lr
	...

080055fc <_free_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	4605      	mov	r5, r0
 8005600:	2900      	cmp	r1, #0
 8005602:	d041      	beq.n	8005688 <_free_r+0x8c>
 8005604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005608:	1f0c      	subs	r4, r1, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	bfb8      	it	lt
 800560e:	18e4      	addlt	r4, r4, r3
 8005610:	f000 f8e0 	bl	80057d4 <__malloc_lock>
 8005614:	4a1d      	ldr	r2, [pc, #116]	@ (800568c <_free_r+0x90>)
 8005616:	6813      	ldr	r3, [r2, #0]
 8005618:	b933      	cbnz	r3, 8005628 <_free_r+0x2c>
 800561a:	6063      	str	r3, [r4, #4]
 800561c:	6014      	str	r4, [r2, #0]
 800561e:	4628      	mov	r0, r5
 8005620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005624:	f000 b8dc 	b.w	80057e0 <__malloc_unlock>
 8005628:	42a3      	cmp	r3, r4
 800562a:	d908      	bls.n	800563e <_free_r+0x42>
 800562c:	6820      	ldr	r0, [r4, #0]
 800562e:	1821      	adds	r1, r4, r0
 8005630:	428b      	cmp	r3, r1
 8005632:	bf01      	itttt	eq
 8005634:	6819      	ldreq	r1, [r3, #0]
 8005636:	685b      	ldreq	r3, [r3, #4]
 8005638:	1809      	addeq	r1, r1, r0
 800563a:	6021      	streq	r1, [r4, #0]
 800563c:	e7ed      	b.n	800561a <_free_r+0x1e>
 800563e:	461a      	mov	r2, r3
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	b10b      	cbz	r3, 8005648 <_free_r+0x4c>
 8005644:	42a3      	cmp	r3, r4
 8005646:	d9fa      	bls.n	800563e <_free_r+0x42>
 8005648:	6811      	ldr	r1, [r2, #0]
 800564a:	1850      	adds	r0, r2, r1
 800564c:	42a0      	cmp	r0, r4
 800564e:	d10b      	bne.n	8005668 <_free_r+0x6c>
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	4401      	add	r1, r0
 8005654:	1850      	adds	r0, r2, r1
 8005656:	4283      	cmp	r3, r0
 8005658:	6011      	str	r1, [r2, #0]
 800565a:	d1e0      	bne.n	800561e <_free_r+0x22>
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	6053      	str	r3, [r2, #4]
 8005662:	4408      	add	r0, r1
 8005664:	6010      	str	r0, [r2, #0]
 8005666:	e7da      	b.n	800561e <_free_r+0x22>
 8005668:	d902      	bls.n	8005670 <_free_r+0x74>
 800566a:	230c      	movs	r3, #12
 800566c:	602b      	str	r3, [r5, #0]
 800566e:	e7d6      	b.n	800561e <_free_r+0x22>
 8005670:	6820      	ldr	r0, [r4, #0]
 8005672:	1821      	adds	r1, r4, r0
 8005674:	428b      	cmp	r3, r1
 8005676:	bf04      	itt	eq
 8005678:	6819      	ldreq	r1, [r3, #0]
 800567a:	685b      	ldreq	r3, [r3, #4]
 800567c:	6063      	str	r3, [r4, #4]
 800567e:	bf04      	itt	eq
 8005680:	1809      	addeq	r1, r1, r0
 8005682:	6021      	streq	r1, [r4, #0]
 8005684:	6054      	str	r4, [r2, #4]
 8005686:	e7ca      	b.n	800561e <_free_r+0x22>
 8005688:	bd38      	pop	{r3, r4, r5, pc}
 800568a:	bf00      	nop
 800568c:	200002cc 	.word	0x200002cc

08005690 <sbrk_aligned>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4e0f      	ldr	r6, [pc, #60]	@ (80056d0 <sbrk_aligned+0x40>)
 8005694:	460c      	mov	r4, r1
 8005696:	6831      	ldr	r1, [r6, #0]
 8005698:	4605      	mov	r5, r0
 800569a:	b911      	cbnz	r1, 80056a2 <sbrk_aligned+0x12>
 800569c:	f000 fca4 	bl	8005fe8 <_sbrk_r>
 80056a0:	6030      	str	r0, [r6, #0]
 80056a2:	4621      	mov	r1, r4
 80056a4:	4628      	mov	r0, r5
 80056a6:	f000 fc9f 	bl	8005fe8 <_sbrk_r>
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	d103      	bne.n	80056b6 <sbrk_aligned+0x26>
 80056ae:	f04f 34ff 	mov.w	r4, #4294967295
 80056b2:	4620      	mov	r0, r4
 80056b4:	bd70      	pop	{r4, r5, r6, pc}
 80056b6:	1cc4      	adds	r4, r0, #3
 80056b8:	f024 0403 	bic.w	r4, r4, #3
 80056bc:	42a0      	cmp	r0, r4
 80056be:	d0f8      	beq.n	80056b2 <sbrk_aligned+0x22>
 80056c0:	1a21      	subs	r1, r4, r0
 80056c2:	4628      	mov	r0, r5
 80056c4:	f000 fc90 	bl	8005fe8 <_sbrk_r>
 80056c8:	3001      	adds	r0, #1
 80056ca:	d1f2      	bne.n	80056b2 <sbrk_aligned+0x22>
 80056cc:	e7ef      	b.n	80056ae <sbrk_aligned+0x1e>
 80056ce:	bf00      	nop
 80056d0:	200002c8 	.word	0x200002c8

080056d4 <_malloc_r>:
 80056d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d8:	1ccd      	adds	r5, r1, #3
 80056da:	f025 0503 	bic.w	r5, r5, #3
 80056de:	3508      	adds	r5, #8
 80056e0:	2d0c      	cmp	r5, #12
 80056e2:	bf38      	it	cc
 80056e4:	250c      	movcc	r5, #12
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	4606      	mov	r6, r0
 80056ea:	db01      	blt.n	80056f0 <_malloc_r+0x1c>
 80056ec:	42a9      	cmp	r1, r5
 80056ee:	d904      	bls.n	80056fa <_malloc_r+0x26>
 80056f0:	230c      	movs	r3, #12
 80056f2:	6033      	str	r3, [r6, #0]
 80056f4:	2000      	movs	r0, #0
 80056f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057d0 <_malloc_r+0xfc>
 80056fe:	f000 f869 	bl	80057d4 <__malloc_lock>
 8005702:	f8d8 3000 	ldr.w	r3, [r8]
 8005706:	461c      	mov	r4, r3
 8005708:	bb44      	cbnz	r4, 800575c <_malloc_r+0x88>
 800570a:	4629      	mov	r1, r5
 800570c:	4630      	mov	r0, r6
 800570e:	f7ff ffbf 	bl	8005690 <sbrk_aligned>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	4604      	mov	r4, r0
 8005716:	d158      	bne.n	80057ca <_malloc_r+0xf6>
 8005718:	f8d8 4000 	ldr.w	r4, [r8]
 800571c:	4627      	mov	r7, r4
 800571e:	2f00      	cmp	r7, #0
 8005720:	d143      	bne.n	80057aa <_malloc_r+0xd6>
 8005722:	2c00      	cmp	r4, #0
 8005724:	d04b      	beq.n	80057be <_malloc_r+0xea>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	4639      	mov	r1, r7
 800572a:	4630      	mov	r0, r6
 800572c:	eb04 0903 	add.w	r9, r4, r3
 8005730:	f000 fc5a 	bl	8005fe8 <_sbrk_r>
 8005734:	4581      	cmp	r9, r0
 8005736:	d142      	bne.n	80057be <_malloc_r+0xea>
 8005738:	6821      	ldr	r1, [r4, #0]
 800573a:	1a6d      	subs	r5, r5, r1
 800573c:	4629      	mov	r1, r5
 800573e:	4630      	mov	r0, r6
 8005740:	f7ff ffa6 	bl	8005690 <sbrk_aligned>
 8005744:	3001      	adds	r0, #1
 8005746:	d03a      	beq.n	80057be <_malloc_r+0xea>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	442b      	add	r3, r5
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	f8d8 3000 	ldr.w	r3, [r8]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	bb62      	cbnz	r2, 80057b0 <_malloc_r+0xdc>
 8005756:	f8c8 7000 	str.w	r7, [r8]
 800575a:	e00f      	b.n	800577c <_malloc_r+0xa8>
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	1b52      	subs	r2, r2, r5
 8005760:	d420      	bmi.n	80057a4 <_malloc_r+0xd0>
 8005762:	2a0b      	cmp	r2, #11
 8005764:	d917      	bls.n	8005796 <_malloc_r+0xc2>
 8005766:	1961      	adds	r1, r4, r5
 8005768:	42a3      	cmp	r3, r4
 800576a:	6025      	str	r5, [r4, #0]
 800576c:	bf18      	it	ne
 800576e:	6059      	strne	r1, [r3, #4]
 8005770:	6863      	ldr	r3, [r4, #4]
 8005772:	bf08      	it	eq
 8005774:	f8c8 1000 	streq.w	r1, [r8]
 8005778:	5162      	str	r2, [r4, r5]
 800577a:	604b      	str	r3, [r1, #4]
 800577c:	4630      	mov	r0, r6
 800577e:	f000 f82f 	bl	80057e0 <__malloc_unlock>
 8005782:	f104 000b 	add.w	r0, r4, #11
 8005786:	1d23      	adds	r3, r4, #4
 8005788:	f020 0007 	bic.w	r0, r0, #7
 800578c:	1ac2      	subs	r2, r0, r3
 800578e:	bf1c      	itt	ne
 8005790:	1a1b      	subne	r3, r3, r0
 8005792:	50a3      	strne	r3, [r4, r2]
 8005794:	e7af      	b.n	80056f6 <_malloc_r+0x22>
 8005796:	6862      	ldr	r2, [r4, #4]
 8005798:	42a3      	cmp	r3, r4
 800579a:	bf0c      	ite	eq
 800579c:	f8c8 2000 	streq.w	r2, [r8]
 80057a0:	605a      	strne	r2, [r3, #4]
 80057a2:	e7eb      	b.n	800577c <_malloc_r+0xa8>
 80057a4:	4623      	mov	r3, r4
 80057a6:	6864      	ldr	r4, [r4, #4]
 80057a8:	e7ae      	b.n	8005708 <_malloc_r+0x34>
 80057aa:	463c      	mov	r4, r7
 80057ac:	687f      	ldr	r7, [r7, #4]
 80057ae:	e7b6      	b.n	800571e <_malloc_r+0x4a>
 80057b0:	461a      	mov	r2, r3
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d1fb      	bne.n	80057b0 <_malloc_r+0xdc>
 80057b8:	2300      	movs	r3, #0
 80057ba:	6053      	str	r3, [r2, #4]
 80057bc:	e7de      	b.n	800577c <_malloc_r+0xa8>
 80057be:	230c      	movs	r3, #12
 80057c0:	6033      	str	r3, [r6, #0]
 80057c2:	4630      	mov	r0, r6
 80057c4:	f000 f80c 	bl	80057e0 <__malloc_unlock>
 80057c8:	e794      	b.n	80056f4 <_malloc_r+0x20>
 80057ca:	6005      	str	r5, [r0, #0]
 80057cc:	e7d6      	b.n	800577c <_malloc_r+0xa8>
 80057ce:	bf00      	nop
 80057d0:	200002cc 	.word	0x200002cc

080057d4 <__malloc_lock>:
 80057d4:	4801      	ldr	r0, [pc, #4]	@ (80057dc <__malloc_lock+0x8>)
 80057d6:	f7ff bf0e 	b.w	80055f6 <__retarget_lock_acquire_recursive>
 80057da:	bf00      	nop
 80057dc:	200002c4 	.word	0x200002c4

080057e0 <__malloc_unlock>:
 80057e0:	4801      	ldr	r0, [pc, #4]	@ (80057e8 <__malloc_unlock+0x8>)
 80057e2:	f7ff bf09 	b.w	80055f8 <__retarget_lock_release_recursive>
 80057e6:	bf00      	nop
 80057e8:	200002c4 	.word	0x200002c4

080057ec <__sfputc_r>:
 80057ec:	6893      	ldr	r3, [r2, #8]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	b410      	push	{r4}
 80057f4:	6093      	str	r3, [r2, #8]
 80057f6:	da08      	bge.n	800580a <__sfputc_r+0x1e>
 80057f8:	6994      	ldr	r4, [r2, #24]
 80057fa:	42a3      	cmp	r3, r4
 80057fc:	db01      	blt.n	8005802 <__sfputc_r+0x16>
 80057fe:	290a      	cmp	r1, #10
 8005800:	d103      	bne.n	800580a <__sfputc_r+0x1e>
 8005802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005806:	f7ff bde8 	b.w	80053da <__swbuf_r>
 800580a:	6813      	ldr	r3, [r2, #0]
 800580c:	1c58      	adds	r0, r3, #1
 800580e:	6010      	str	r0, [r2, #0]
 8005810:	7019      	strb	r1, [r3, #0]
 8005812:	4608      	mov	r0, r1
 8005814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005818:	4770      	bx	lr

0800581a <__sfputs_r>:
 800581a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581c:	4606      	mov	r6, r0
 800581e:	460f      	mov	r7, r1
 8005820:	4614      	mov	r4, r2
 8005822:	18d5      	adds	r5, r2, r3
 8005824:	42ac      	cmp	r4, r5
 8005826:	d101      	bne.n	800582c <__sfputs_r+0x12>
 8005828:	2000      	movs	r0, #0
 800582a:	e007      	b.n	800583c <__sfputs_r+0x22>
 800582c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005830:	463a      	mov	r2, r7
 8005832:	4630      	mov	r0, r6
 8005834:	f7ff ffda 	bl	80057ec <__sfputc_r>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d1f3      	bne.n	8005824 <__sfputs_r+0xa>
 800583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005840 <_vfiprintf_r>:
 8005840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	460d      	mov	r5, r1
 8005846:	b09d      	sub	sp, #116	@ 0x74
 8005848:	4614      	mov	r4, r2
 800584a:	4698      	mov	r8, r3
 800584c:	4606      	mov	r6, r0
 800584e:	b118      	cbz	r0, 8005858 <_vfiprintf_r+0x18>
 8005850:	6a03      	ldr	r3, [r0, #32]
 8005852:	b90b      	cbnz	r3, 8005858 <_vfiprintf_r+0x18>
 8005854:	f7ff fcd8 	bl	8005208 <__sinit>
 8005858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800585a:	07d9      	lsls	r1, r3, #31
 800585c:	d405      	bmi.n	800586a <_vfiprintf_r+0x2a>
 800585e:	89ab      	ldrh	r3, [r5, #12]
 8005860:	059a      	lsls	r2, r3, #22
 8005862:	d402      	bmi.n	800586a <_vfiprintf_r+0x2a>
 8005864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005866:	f7ff fec6 	bl	80055f6 <__retarget_lock_acquire_recursive>
 800586a:	89ab      	ldrh	r3, [r5, #12]
 800586c:	071b      	lsls	r3, r3, #28
 800586e:	d501      	bpl.n	8005874 <_vfiprintf_r+0x34>
 8005870:	692b      	ldr	r3, [r5, #16]
 8005872:	b99b      	cbnz	r3, 800589c <_vfiprintf_r+0x5c>
 8005874:	4629      	mov	r1, r5
 8005876:	4630      	mov	r0, r6
 8005878:	f7ff fdee 	bl	8005458 <__swsetup_r>
 800587c:	b170      	cbz	r0, 800589c <_vfiprintf_r+0x5c>
 800587e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005880:	07dc      	lsls	r4, r3, #31
 8005882:	d504      	bpl.n	800588e <_vfiprintf_r+0x4e>
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	b01d      	add	sp, #116	@ 0x74
 800588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588e:	89ab      	ldrh	r3, [r5, #12]
 8005890:	0598      	lsls	r0, r3, #22
 8005892:	d4f7      	bmi.n	8005884 <_vfiprintf_r+0x44>
 8005894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005896:	f7ff feaf 	bl	80055f8 <__retarget_lock_release_recursive>
 800589a:	e7f3      	b.n	8005884 <_vfiprintf_r+0x44>
 800589c:	2300      	movs	r3, #0
 800589e:	9309      	str	r3, [sp, #36]	@ 0x24
 80058a0:	2320      	movs	r3, #32
 80058a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80058aa:	2330      	movs	r3, #48	@ 0x30
 80058ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005a5c <_vfiprintf_r+0x21c>
 80058b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058b4:	f04f 0901 	mov.w	r9, #1
 80058b8:	4623      	mov	r3, r4
 80058ba:	469a      	mov	sl, r3
 80058bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058c0:	b10a      	cbz	r2, 80058c6 <_vfiprintf_r+0x86>
 80058c2:	2a25      	cmp	r2, #37	@ 0x25
 80058c4:	d1f9      	bne.n	80058ba <_vfiprintf_r+0x7a>
 80058c6:	ebba 0b04 	subs.w	fp, sl, r4
 80058ca:	d00b      	beq.n	80058e4 <_vfiprintf_r+0xa4>
 80058cc:	465b      	mov	r3, fp
 80058ce:	4622      	mov	r2, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	4630      	mov	r0, r6
 80058d4:	f7ff ffa1 	bl	800581a <__sfputs_r>
 80058d8:	3001      	adds	r0, #1
 80058da:	f000 80a7 	beq.w	8005a2c <_vfiprintf_r+0x1ec>
 80058de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058e0:	445a      	add	r2, fp
 80058e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80058e4:	f89a 3000 	ldrb.w	r3, [sl]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 809f 	beq.w	8005a2c <_vfiprintf_r+0x1ec>
 80058ee:	2300      	movs	r3, #0
 80058f0:	f04f 32ff 	mov.w	r2, #4294967295
 80058f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058f8:	f10a 0a01 	add.w	sl, sl, #1
 80058fc:	9304      	str	r3, [sp, #16]
 80058fe:	9307      	str	r3, [sp, #28]
 8005900:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005904:	931a      	str	r3, [sp, #104]	@ 0x68
 8005906:	4654      	mov	r4, sl
 8005908:	2205      	movs	r2, #5
 800590a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590e:	4853      	ldr	r0, [pc, #332]	@ (8005a5c <_vfiprintf_r+0x21c>)
 8005910:	f7fa fc66 	bl	80001e0 <memchr>
 8005914:	9a04      	ldr	r2, [sp, #16]
 8005916:	b9d8      	cbnz	r0, 8005950 <_vfiprintf_r+0x110>
 8005918:	06d1      	lsls	r1, r2, #27
 800591a:	bf44      	itt	mi
 800591c:	2320      	movmi	r3, #32
 800591e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005922:	0713      	lsls	r3, r2, #28
 8005924:	bf44      	itt	mi
 8005926:	232b      	movmi	r3, #43	@ 0x2b
 8005928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800592c:	f89a 3000 	ldrb.w	r3, [sl]
 8005930:	2b2a      	cmp	r3, #42	@ 0x2a
 8005932:	d015      	beq.n	8005960 <_vfiprintf_r+0x120>
 8005934:	9a07      	ldr	r2, [sp, #28]
 8005936:	4654      	mov	r4, sl
 8005938:	2000      	movs	r0, #0
 800593a:	f04f 0c0a 	mov.w	ip, #10
 800593e:	4621      	mov	r1, r4
 8005940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005944:	3b30      	subs	r3, #48	@ 0x30
 8005946:	2b09      	cmp	r3, #9
 8005948:	d94b      	bls.n	80059e2 <_vfiprintf_r+0x1a2>
 800594a:	b1b0      	cbz	r0, 800597a <_vfiprintf_r+0x13a>
 800594c:	9207      	str	r2, [sp, #28]
 800594e:	e014      	b.n	800597a <_vfiprintf_r+0x13a>
 8005950:	eba0 0308 	sub.w	r3, r0, r8
 8005954:	fa09 f303 	lsl.w	r3, r9, r3
 8005958:	4313      	orrs	r3, r2
 800595a:	9304      	str	r3, [sp, #16]
 800595c:	46a2      	mov	sl, r4
 800595e:	e7d2      	b.n	8005906 <_vfiprintf_r+0xc6>
 8005960:	9b03      	ldr	r3, [sp, #12]
 8005962:	1d19      	adds	r1, r3, #4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	9103      	str	r1, [sp, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	bfbb      	ittet	lt
 800596c:	425b      	neglt	r3, r3
 800596e:	f042 0202 	orrlt.w	r2, r2, #2
 8005972:	9307      	strge	r3, [sp, #28]
 8005974:	9307      	strlt	r3, [sp, #28]
 8005976:	bfb8      	it	lt
 8005978:	9204      	strlt	r2, [sp, #16]
 800597a:	7823      	ldrb	r3, [r4, #0]
 800597c:	2b2e      	cmp	r3, #46	@ 0x2e
 800597e:	d10a      	bne.n	8005996 <_vfiprintf_r+0x156>
 8005980:	7863      	ldrb	r3, [r4, #1]
 8005982:	2b2a      	cmp	r3, #42	@ 0x2a
 8005984:	d132      	bne.n	80059ec <_vfiprintf_r+0x1ac>
 8005986:	9b03      	ldr	r3, [sp, #12]
 8005988:	1d1a      	adds	r2, r3, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	9203      	str	r2, [sp, #12]
 800598e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005992:	3402      	adds	r4, #2
 8005994:	9305      	str	r3, [sp, #20]
 8005996:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005a6c <_vfiprintf_r+0x22c>
 800599a:	7821      	ldrb	r1, [r4, #0]
 800599c:	2203      	movs	r2, #3
 800599e:	4650      	mov	r0, sl
 80059a0:	f7fa fc1e 	bl	80001e0 <memchr>
 80059a4:	b138      	cbz	r0, 80059b6 <_vfiprintf_r+0x176>
 80059a6:	9b04      	ldr	r3, [sp, #16]
 80059a8:	eba0 000a 	sub.w	r0, r0, sl
 80059ac:	2240      	movs	r2, #64	@ 0x40
 80059ae:	4082      	lsls	r2, r0
 80059b0:	4313      	orrs	r3, r2
 80059b2:	3401      	adds	r4, #1
 80059b4:	9304      	str	r3, [sp, #16]
 80059b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ba:	4829      	ldr	r0, [pc, #164]	@ (8005a60 <_vfiprintf_r+0x220>)
 80059bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059c0:	2206      	movs	r2, #6
 80059c2:	f7fa fc0d 	bl	80001e0 <memchr>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d03f      	beq.n	8005a4a <_vfiprintf_r+0x20a>
 80059ca:	4b26      	ldr	r3, [pc, #152]	@ (8005a64 <_vfiprintf_r+0x224>)
 80059cc:	bb1b      	cbnz	r3, 8005a16 <_vfiprintf_r+0x1d6>
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	3307      	adds	r3, #7
 80059d2:	f023 0307 	bic.w	r3, r3, #7
 80059d6:	3308      	adds	r3, #8
 80059d8:	9303      	str	r3, [sp, #12]
 80059da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059dc:	443b      	add	r3, r7
 80059de:	9309      	str	r3, [sp, #36]	@ 0x24
 80059e0:	e76a      	b.n	80058b8 <_vfiprintf_r+0x78>
 80059e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80059e6:	460c      	mov	r4, r1
 80059e8:	2001      	movs	r0, #1
 80059ea:	e7a8      	b.n	800593e <_vfiprintf_r+0xfe>
 80059ec:	2300      	movs	r3, #0
 80059ee:	3401      	adds	r4, #1
 80059f0:	9305      	str	r3, [sp, #20]
 80059f2:	4619      	mov	r1, r3
 80059f4:	f04f 0c0a 	mov.w	ip, #10
 80059f8:	4620      	mov	r0, r4
 80059fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059fe:	3a30      	subs	r2, #48	@ 0x30
 8005a00:	2a09      	cmp	r2, #9
 8005a02:	d903      	bls.n	8005a0c <_vfiprintf_r+0x1cc>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0c6      	beq.n	8005996 <_vfiprintf_r+0x156>
 8005a08:	9105      	str	r1, [sp, #20]
 8005a0a:	e7c4      	b.n	8005996 <_vfiprintf_r+0x156>
 8005a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a10:	4604      	mov	r4, r0
 8005a12:	2301      	movs	r3, #1
 8005a14:	e7f0      	b.n	80059f8 <_vfiprintf_r+0x1b8>
 8005a16:	ab03      	add	r3, sp, #12
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	462a      	mov	r2, r5
 8005a1c:	4b12      	ldr	r3, [pc, #72]	@ (8005a68 <_vfiprintf_r+0x228>)
 8005a1e:	a904      	add	r1, sp, #16
 8005a20:	4630      	mov	r0, r6
 8005a22:	f3af 8000 	nop.w
 8005a26:	4607      	mov	r7, r0
 8005a28:	1c78      	adds	r0, r7, #1
 8005a2a:	d1d6      	bne.n	80059da <_vfiprintf_r+0x19a>
 8005a2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a2e:	07d9      	lsls	r1, r3, #31
 8005a30:	d405      	bmi.n	8005a3e <_vfiprintf_r+0x1fe>
 8005a32:	89ab      	ldrh	r3, [r5, #12]
 8005a34:	059a      	lsls	r2, r3, #22
 8005a36:	d402      	bmi.n	8005a3e <_vfiprintf_r+0x1fe>
 8005a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a3a:	f7ff fddd 	bl	80055f8 <__retarget_lock_release_recursive>
 8005a3e:	89ab      	ldrh	r3, [r5, #12]
 8005a40:	065b      	lsls	r3, r3, #25
 8005a42:	f53f af1f 	bmi.w	8005884 <_vfiprintf_r+0x44>
 8005a46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a48:	e71e      	b.n	8005888 <_vfiprintf_r+0x48>
 8005a4a:	ab03      	add	r3, sp, #12
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	462a      	mov	r2, r5
 8005a50:	4b05      	ldr	r3, [pc, #20]	@ (8005a68 <_vfiprintf_r+0x228>)
 8005a52:	a904      	add	r1, sp, #16
 8005a54:	4630      	mov	r0, r6
 8005a56:	f000 f879 	bl	8005b4c <_printf_i>
 8005a5a:	e7e4      	b.n	8005a26 <_vfiprintf_r+0x1e6>
 8005a5c:	0800608c 	.word	0x0800608c
 8005a60:	08006096 	.word	0x08006096
 8005a64:	00000000 	.word	0x00000000
 8005a68:	0800581b 	.word	0x0800581b
 8005a6c:	08006092 	.word	0x08006092

08005a70 <_printf_common>:
 8005a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a74:	4616      	mov	r6, r2
 8005a76:	4698      	mov	r8, r3
 8005a78:	688a      	ldr	r2, [r1, #8]
 8005a7a:	690b      	ldr	r3, [r1, #16]
 8005a7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a80:	4293      	cmp	r3, r2
 8005a82:	bfb8      	it	lt
 8005a84:	4613      	movlt	r3, r2
 8005a86:	6033      	str	r3, [r6, #0]
 8005a88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a8c:	4607      	mov	r7, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	b10a      	cbz	r2, 8005a96 <_printf_common+0x26>
 8005a92:	3301      	adds	r3, #1
 8005a94:	6033      	str	r3, [r6, #0]
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	0699      	lsls	r1, r3, #26
 8005a9a:	bf42      	ittt	mi
 8005a9c:	6833      	ldrmi	r3, [r6, #0]
 8005a9e:	3302      	addmi	r3, #2
 8005aa0:	6033      	strmi	r3, [r6, #0]
 8005aa2:	6825      	ldr	r5, [r4, #0]
 8005aa4:	f015 0506 	ands.w	r5, r5, #6
 8005aa8:	d106      	bne.n	8005ab8 <_printf_common+0x48>
 8005aaa:	f104 0a19 	add.w	sl, r4, #25
 8005aae:	68e3      	ldr	r3, [r4, #12]
 8005ab0:	6832      	ldr	r2, [r6, #0]
 8005ab2:	1a9b      	subs	r3, r3, r2
 8005ab4:	42ab      	cmp	r3, r5
 8005ab6:	dc26      	bgt.n	8005b06 <_printf_common+0x96>
 8005ab8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005abc:	6822      	ldr	r2, [r4, #0]
 8005abe:	3b00      	subs	r3, #0
 8005ac0:	bf18      	it	ne
 8005ac2:	2301      	movne	r3, #1
 8005ac4:	0692      	lsls	r2, r2, #26
 8005ac6:	d42b      	bmi.n	8005b20 <_printf_common+0xb0>
 8005ac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005acc:	4641      	mov	r1, r8
 8005ace:	4638      	mov	r0, r7
 8005ad0:	47c8      	blx	r9
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d01e      	beq.n	8005b14 <_printf_common+0xa4>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	6922      	ldr	r2, [r4, #16]
 8005ada:	f003 0306 	and.w	r3, r3, #6
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	bf02      	ittt	eq
 8005ae2:	68e5      	ldreq	r5, [r4, #12]
 8005ae4:	6833      	ldreq	r3, [r6, #0]
 8005ae6:	1aed      	subeq	r5, r5, r3
 8005ae8:	68a3      	ldr	r3, [r4, #8]
 8005aea:	bf0c      	ite	eq
 8005aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af0:	2500      	movne	r5, #0
 8005af2:	4293      	cmp	r3, r2
 8005af4:	bfc4      	itt	gt
 8005af6:	1a9b      	subgt	r3, r3, r2
 8005af8:	18ed      	addgt	r5, r5, r3
 8005afa:	2600      	movs	r6, #0
 8005afc:	341a      	adds	r4, #26
 8005afe:	42b5      	cmp	r5, r6
 8005b00:	d11a      	bne.n	8005b38 <_printf_common+0xc8>
 8005b02:	2000      	movs	r0, #0
 8005b04:	e008      	b.n	8005b18 <_printf_common+0xa8>
 8005b06:	2301      	movs	r3, #1
 8005b08:	4652      	mov	r2, sl
 8005b0a:	4641      	mov	r1, r8
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	47c8      	blx	r9
 8005b10:	3001      	adds	r0, #1
 8005b12:	d103      	bne.n	8005b1c <_printf_common+0xac>
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1c:	3501      	adds	r5, #1
 8005b1e:	e7c6      	b.n	8005aae <_printf_common+0x3e>
 8005b20:	18e1      	adds	r1, r4, r3
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	2030      	movs	r0, #48	@ 0x30
 8005b26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b2a:	4422      	add	r2, r4
 8005b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b34:	3302      	adds	r3, #2
 8005b36:	e7c7      	b.n	8005ac8 <_printf_common+0x58>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	4638      	mov	r0, r7
 8005b40:	47c8      	blx	r9
 8005b42:	3001      	adds	r0, #1
 8005b44:	d0e6      	beq.n	8005b14 <_printf_common+0xa4>
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7d9      	b.n	8005afe <_printf_common+0x8e>
	...

08005b4c <_printf_i>:
 8005b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b50:	7e0f      	ldrb	r7, [r1, #24]
 8005b52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b54:	2f78      	cmp	r7, #120	@ 0x78
 8005b56:	4691      	mov	r9, r2
 8005b58:	4680      	mov	r8, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	469a      	mov	sl, r3
 8005b5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b62:	d807      	bhi.n	8005b74 <_printf_i+0x28>
 8005b64:	2f62      	cmp	r7, #98	@ 0x62
 8005b66:	d80a      	bhi.n	8005b7e <_printf_i+0x32>
 8005b68:	2f00      	cmp	r7, #0
 8005b6a:	f000 80d1 	beq.w	8005d10 <_printf_i+0x1c4>
 8005b6e:	2f58      	cmp	r7, #88	@ 0x58
 8005b70:	f000 80b8 	beq.w	8005ce4 <_printf_i+0x198>
 8005b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b7c:	e03a      	b.n	8005bf4 <_printf_i+0xa8>
 8005b7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b82:	2b15      	cmp	r3, #21
 8005b84:	d8f6      	bhi.n	8005b74 <_printf_i+0x28>
 8005b86:	a101      	add	r1, pc, #4	@ (adr r1, 8005b8c <_printf_i+0x40>)
 8005b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b8c:	08005be5 	.word	0x08005be5
 8005b90:	08005bf9 	.word	0x08005bf9
 8005b94:	08005b75 	.word	0x08005b75
 8005b98:	08005b75 	.word	0x08005b75
 8005b9c:	08005b75 	.word	0x08005b75
 8005ba0:	08005b75 	.word	0x08005b75
 8005ba4:	08005bf9 	.word	0x08005bf9
 8005ba8:	08005b75 	.word	0x08005b75
 8005bac:	08005b75 	.word	0x08005b75
 8005bb0:	08005b75 	.word	0x08005b75
 8005bb4:	08005b75 	.word	0x08005b75
 8005bb8:	08005cf7 	.word	0x08005cf7
 8005bbc:	08005c23 	.word	0x08005c23
 8005bc0:	08005cb1 	.word	0x08005cb1
 8005bc4:	08005b75 	.word	0x08005b75
 8005bc8:	08005b75 	.word	0x08005b75
 8005bcc:	08005d19 	.word	0x08005d19
 8005bd0:	08005b75 	.word	0x08005b75
 8005bd4:	08005c23 	.word	0x08005c23
 8005bd8:	08005b75 	.word	0x08005b75
 8005bdc:	08005b75 	.word	0x08005b75
 8005be0:	08005cb9 	.word	0x08005cb9
 8005be4:	6833      	ldr	r3, [r6, #0]
 8005be6:	1d1a      	adds	r2, r3, #4
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6032      	str	r2, [r6, #0]
 8005bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e09c      	b.n	8005d32 <_printf_i+0x1e6>
 8005bf8:	6833      	ldr	r3, [r6, #0]
 8005bfa:	6820      	ldr	r0, [r4, #0]
 8005bfc:	1d19      	adds	r1, r3, #4
 8005bfe:	6031      	str	r1, [r6, #0]
 8005c00:	0606      	lsls	r6, r0, #24
 8005c02:	d501      	bpl.n	8005c08 <_printf_i+0xbc>
 8005c04:	681d      	ldr	r5, [r3, #0]
 8005c06:	e003      	b.n	8005c10 <_printf_i+0xc4>
 8005c08:	0645      	lsls	r5, r0, #25
 8005c0a:	d5fb      	bpl.n	8005c04 <_printf_i+0xb8>
 8005c0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c10:	2d00      	cmp	r5, #0
 8005c12:	da03      	bge.n	8005c1c <_printf_i+0xd0>
 8005c14:	232d      	movs	r3, #45	@ 0x2d
 8005c16:	426d      	negs	r5, r5
 8005c18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c1c:	4858      	ldr	r0, [pc, #352]	@ (8005d80 <_printf_i+0x234>)
 8005c1e:	230a      	movs	r3, #10
 8005c20:	e011      	b.n	8005c46 <_printf_i+0xfa>
 8005c22:	6821      	ldr	r1, [r4, #0]
 8005c24:	6833      	ldr	r3, [r6, #0]
 8005c26:	0608      	lsls	r0, r1, #24
 8005c28:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c2c:	d402      	bmi.n	8005c34 <_printf_i+0xe8>
 8005c2e:	0649      	lsls	r1, r1, #25
 8005c30:	bf48      	it	mi
 8005c32:	b2ad      	uxthmi	r5, r5
 8005c34:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c36:	4852      	ldr	r0, [pc, #328]	@ (8005d80 <_printf_i+0x234>)
 8005c38:	6033      	str	r3, [r6, #0]
 8005c3a:	bf14      	ite	ne
 8005c3c:	230a      	movne	r3, #10
 8005c3e:	2308      	moveq	r3, #8
 8005c40:	2100      	movs	r1, #0
 8005c42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c46:	6866      	ldr	r6, [r4, #4]
 8005c48:	60a6      	str	r6, [r4, #8]
 8005c4a:	2e00      	cmp	r6, #0
 8005c4c:	db05      	blt.n	8005c5a <_printf_i+0x10e>
 8005c4e:	6821      	ldr	r1, [r4, #0]
 8005c50:	432e      	orrs	r6, r5
 8005c52:	f021 0104 	bic.w	r1, r1, #4
 8005c56:	6021      	str	r1, [r4, #0]
 8005c58:	d04b      	beq.n	8005cf2 <_printf_i+0x1a6>
 8005c5a:	4616      	mov	r6, r2
 8005c5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c60:	fb03 5711 	mls	r7, r3, r1, r5
 8005c64:	5dc7      	ldrb	r7, [r0, r7]
 8005c66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c6a:	462f      	mov	r7, r5
 8005c6c:	42bb      	cmp	r3, r7
 8005c6e:	460d      	mov	r5, r1
 8005c70:	d9f4      	bls.n	8005c5c <_printf_i+0x110>
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d10b      	bne.n	8005c8e <_printf_i+0x142>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	07df      	lsls	r7, r3, #31
 8005c7a:	d508      	bpl.n	8005c8e <_printf_i+0x142>
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	6861      	ldr	r1, [r4, #4]
 8005c80:	4299      	cmp	r1, r3
 8005c82:	bfde      	ittt	le
 8005c84:	2330      	movle	r3, #48	@ 0x30
 8005c86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c8e:	1b92      	subs	r2, r2, r6
 8005c90:	6122      	str	r2, [r4, #16]
 8005c92:	f8cd a000 	str.w	sl, [sp]
 8005c96:	464b      	mov	r3, r9
 8005c98:	aa03      	add	r2, sp, #12
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	f7ff fee7 	bl	8005a70 <_printf_common>
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d14a      	bne.n	8005d3c <_printf_i+0x1f0>
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8005caa:	b004      	add	sp, #16
 8005cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	f043 0320 	orr.w	r3, r3, #32
 8005cb6:	6023      	str	r3, [r4, #0]
 8005cb8:	4832      	ldr	r0, [pc, #200]	@ (8005d84 <_printf_i+0x238>)
 8005cba:	2778      	movs	r7, #120	@ 0x78
 8005cbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	6831      	ldr	r1, [r6, #0]
 8005cc4:	061f      	lsls	r7, r3, #24
 8005cc6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cca:	d402      	bmi.n	8005cd2 <_printf_i+0x186>
 8005ccc:	065f      	lsls	r7, r3, #25
 8005cce:	bf48      	it	mi
 8005cd0:	b2ad      	uxthmi	r5, r5
 8005cd2:	6031      	str	r1, [r6, #0]
 8005cd4:	07d9      	lsls	r1, r3, #31
 8005cd6:	bf44      	itt	mi
 8005cd8:	f043 0320 	orrmi.w	r3, r3, #32
 8005cdc:	6023      	strmi	r3, [r4, #0]
 8005cde:	b11d      	cbz	r5, 8005ce8 <_printf_i+0x19c>
 8005ce0:	2310      	movs	r3, #16
 8005ce2:	e7ad      	b.n	8005c40 <_printf_i+0xf4>
 8005ce4:	4826      	ldr	r0, [pc, #152]	@ (8005d80 <_printf_i+0x234>)
 8005ce6:	e7e9      	b.n	8005cbc <_printf_i+0x170>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	f023 0320 	bic.w	r3, r3, #32
 8005cee:	6023      	str	r3, [r4, #0]
 8005cf0:	e7f6      	b.n	8005ce0 <_printf_i+0x194>
 8005cf2:	4616      	mov	r6, r2
 8005cf4:	e7bd      	b.n	8005c72 <_printf_i+0x126>
 8005cf6:	6833      	ldr	r3, [r6, #0]
 8005cf8:	6825      	ldr	r5, [r4, #0]
 8005cfa:	6961      	ldr	r1, [r4, #20]
 8005cfc:	1d18      	adds	r0, r3, #4
 8005cfe:	6030      	str	r0, [r6, #0]
 8005d00:	062e      	lsls	r6, r5, #24
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	d501      	bpl.n	8005d0a <_printf_i+0x1be>
 8005d06:	6019      	str	r1, [r3, #0]
 8005d08:	e002      	b.n	8005d10 <_printf_i+0x1c4>
 8005d0a:	0668      	lsls	r0, r5, #25
 8005d0c:	d5fb      	bpl.n	8005d06 <_printf_i+0x1ba>
 8005d0e:	8019      	strh	r1, [r3, #0]
 8005d10:	2300      	movs	r3, #0
 8005d12:	6123      	str	r3, [r4, #16]
 8005d14:	4616      	mov	r6, r2
 8005d16:	e7bc      	b.n	8005c92 <_printf_i+0x146>
 8005d18:	6833      	ldr	r3, [r6, #0]
 8005d1a:	1d1a      	adds	r2, r3, #4
 8005d1c:	6032      	str	r2, [r6, #0]
 8005d1e:	681e      	ldr	r6, [r3, #0]
 8005d20:	6862      	ldr	r2, [r4, #4]
 8005d22:	2100      	movs	r1, #0
 8005d24:	4630      	mov	r0, r6
 8005d26:	f7fa fa5b 	bl	80001e0 <memchr>
 8005d2a:	b108      	cbz	r0, 8005d30 <_printf_i+0x1e4>
 8005d2c:	1b80      	subs	r0, r0, r6
 8005d2e:	6060      	str	r0, [r4, #4]
 8005d30:	6863      	ldr	r3, [r4, #4]
 8005d32:	6123      	str	r3, [r4, #16]
 8005d34:	2300      	movs	r3, #0
 8005d36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d3a:	e7aa      	b.n	8005c92 <_printf_i+0x146>
 8005d3c:	6923      	ldr	r3, [r4, #16]
 8005d3e:	4632      	mov	r2, r6
 8005d40:	4649      	mov	r1, r9
 8005d42:	4640      	mov	r0, r8
 8005d44:	47d0      	blx	sl
 8005d46:	3001      	adds	r0, #1
 8005d48:	d0ad      	beq.n	8005ca6 <_printf_i+0x15a>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	079b      	lsls	r3, r3, #30
 8005d4e:	d413      	bmi.n	8005d78 <_printf_i+0x22c>
 8005d50:	68e0      	ldr	r0, [r4, #12]
 8005d52:	9b03      	ldr	r3, [sp, #12]
 8005d54:	4298      	cmp	r0, r3
 8005d56:	bfb8      	it	lt
 8005d58:	4618      	movlt	r0, r3
 8005d5a:	e7a6      	b.n	8005caa <_printf_i+0x15e>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4632      	mov	r2, r6
 8005d60:	4649      	mov	r1, r9
 8005d62:	4640      	mov	r0, r8
 8005d64:	47d0      	blx	sl
 8005d66:	3001      	adds	r0, #1
 8005d68:	d09d      	beq.n	8005ca6 <_printf_i+0x15a>
 8005d6a:	3501      	adds	r5, #1
 8005d6c:	68e3      	ldr	r3, [r4, #12]
 8005d6e:	9903      	ldr	r1, [sp, #12]
 8005d70:	1a5b      	subs	r3, r3, r1
 8005d72:	42ab      	cmp	r3, r5
 8005d74:	dcf2      	bgt.n	8005d5c <_printf_i+0x210>
 8005d76:	e7eb      	b.n	8005d50 <_printf_i+0x204>
 8005d78:	2500      	movs	r5, #0
 8005d7a:	f104 0619 	add.w	r6, r4, #25
 8005d7e:	e7f5      	b.n	8005d6c <_printf_i+0x220>
 8005d80:	0800609d 	.word	0x0800609d
 8005d84:	080060ae 	.word	0x080060ae

08005d88 <__sflush_r>:
 8005d88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d90:	0716      	lsls	r6, r2, #28
 8005d92:	4605      	mov	r5, r0
 8005d94:	460c      	mov	r4, r1
 8005d96:	d454      	bmi.n	8005e42 <__sflush_r+0xba>
 8005d98:	684b      	ldr	r3, [r1, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	dc02      	bgt.n	8005da4 <__sflush_r+0x1c>
 8005d9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	dd48      	ble.n	8005e36 <__sflush_r+0xae>
 8005da4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005da6:	2e00      	cmp	r6, #0
 8005da8:	d045      	beq.n	8005e36 <__sflush_r+0xae>
 8005daa:	2300      	movs	r3, #0
 8005dac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005db0:	682f      	ldr	r7, [r5, #0]
 8005db2:	6a21      	ldr	r1, [r4, #32]
 8005db4:	602b      	str	r3, [r5, #0]
 8005db6:	d030      	beq.n	8005e1a <__sflush_r+0x92>
 8005db8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	0759      	lsls	r1, r3, #29
 8005dbe:	d505      	bpl.n	8005dcc <__sflush_r+0x44>
 8005dc0:	6863      	ldr	r3, [r4, #4]
 8005dc2:	1ad2      	subs	r2, r2, r3
 8005dc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005dc6:	b10b      	cbz	r3, 8005dcc <__sflush_r+0x44>
 8005dc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dca:	1ad2      	subs	r2, r2, r3
 8005dcc:	2300      	movs	r3, #0
 8005dce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dd0:	6a21      	ldr	r1, [r4, #32]
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	47b0      	blx	r6
 8005dd6:	1c43      	adds	r3, r0, #1
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	d106      	bne.n	8005dea <__sflush_r+0x62>
 8005ddc:	6829      	ldr	r1, [r5, #0]
 8005dde:	291d      	cmp	r1, #29
 8005de0:	d82b      	bhi.n	8005e3a <__sflush_r+0xb2>
 8005de2:	4a2a      	ldr	r2, [pc, #168]	@ (8005e8c <__sflush_r+0x104>)
 8005de4:	40ca      	lsrs	r2, r1
 8005de6:	07d6      	lsls	r6, r2, #31
 8005de8:	d527      	bpl.n	8005e3a <__sflush_r+0xb2>
 8005dea:	2200      	movs	r2, #0
 8005dec:	6062      	str	r2, [r4, #4]
 8005dee:	04d9      	lsls	r1, r3, #19
 8005df0:	6922      	ldr	r2, [r4, #16]
 8005df2:	6022      	str	r2, [r4, #0]
 8005df4:	d504      	bpl.n	8005e00 <__sflush_r+0x78>
 8005df6:	1c42      	adds	r2, r0, #1
 8005df8:	d101      	bne.n	8005dfe <__sflush_r+0x76>
 8005dfa:	682b      	ldr	r3, [r5, #0]
 8005dfc:	b903      	cbnz	r3, 8005e00 <__sflush_r+0x78>
 8005dfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e02:	602f      	str	r7, [r5, #0]
 8005e04:	b1b9      	cbz	r1, 8005e36 <__sflush_r+0xae>
 8005e06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e0a:	4299      	cmp	r1, r3
 8005e0c:	d002      	beq.n	8005e14 <__sflush_r+0x8c>
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f7ff fbf4 	bl	80055fc <_free_r>
 8005e14:	2300      	movs	r3, #0
 8005e16:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e18:	e00d      	b.n	8005e36 <__sflush_r+0xae>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b0      	blx	r6
 8005e20:	4602      	mov	r2, r0
 8005e22:	1c50      	adds	r0, r2, #1
 8005e24:	d1c9      	bne.n	8005dba <__sflush_r+0x32>
 8005e26:	682b      	ldr	r3, [r5, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0c6      	beq.n	8005dba <__sflush_r+0x32>
 8005e2c:	2b1d      	cmp	r3, #29
 8005e2e:	d001      	beq.n	8005e34 <__sflush_r+0xac>
 8005e30:	2b16      	cmp	r3, #22
 8005e32:	d11e      	bne.n	8005e72 <__sflush_r+0xea>
 8005e34:	602f      	str	r7, [r5, #0]
 8005e36:	2000      	movs	r0, #0
 8005e38:	e022      	b.n	8005e80 <__sflush_r+0xf8>
 8005e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e3e:	b21b      	sxth	r3, r3
 8005e40:	e01b      	b.n	8005e7a <__sflush_r+0xf2>
 8005e42:	690f      	ldr	r7, [r1, #16]
 8005e44:	2f00      	cmp	r7, #0
 8005e46:	d0f6      	beq.n	8005e36 <__sflush_r+0xae>
 8005e48:	0793      	lsls	r3, r2, #30
 8005e4a:	680e      	ldr	r6, [r1, #0]
 8005e4c:	bf08      	it	eq
 8005e4e:	694b      	ldreq	r3, [r1, #20]
 8005e50:	600f      	str	r7, [r1, #0]
 8005e52:	bf18      	it	ne
 8005e54:	2300      	movne	r3, #0
 8005e56:	eba6 0807 	sub.w	r8, r6, r7
 8005e5a:	608b      	str	r3, [r1, #8]
 8005e5c:	f1b8 0f00 	cmp.w	r8, #0
 8005e60:	dde9      	ble.n	8005e36 <__sflush_r+0xae>
 8005e62:	6a21      	ldr	r1, [r4, #32]
 8005e64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e66:	4643      	mov	r3, r8
 8005e68:	463a      	mov	r2, r7
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	47b0      	blx	r6
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	dc08      	bgt.n	8005e84 <__sflush_r+0xfc>
 8005e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e84:	4407      	add	r7, r0
 8005e86:	eba8 0800 	sub.w	r8, r8, r0
 8005e8a:	e7e7      	b.n	8005e5c <__sflush_r+0xd4>
 8005e8c:	20400001 	.word	0x20400001

08005e90 <_fflush_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	690b      	ldr	r3, [r1, #16]
 8005e94:	4605      	mov	r5, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	b913      	cbnz	r3, 8005ea0 <_fflush_r+0x10>
 8005e9a:	2500      	movs	r5, #0
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	b118      	cbz	r0, 8005eaa <_fflush_r+0x1a>
 8005ea2:	6a03      	ldr	r3, [r0, #32]
 8005ea4:	b90b      	cbnz	r3, 8005eaa <_fflush_r+0x1a>
 8005ea6:	f7ff f9af 	bl	8005208 <__sinit>
 8005eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f3      	beq.n	8005e9a <_fflush_r+0xa>
 8005eb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005eb4:	07d0      	lsls	r0, r2, #31
 8005eb6:	d404      	bmi.n	8005ec2 <_fflush_r+0x32>
 8005eb8:	0599      	lsls	r1, r3, #22
 8005eba:	d402      	bmi.n	8005ec2 <_fflush_r+0x32>
 8005ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ebe:	f7ff fb9a 	bl	80055f6 <__retarget_lock_acquire_recursive>
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	f7ff ff5f 	bl	8005d88 <__sflush_r>
 8005eca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ecc:	07da      	lsls	r2, r3, #31
 8005ece:	4605      	mov	r5, r0
 8005ed0:	d4e4      	bmi.n	8005e9c <_fflush_r+0xc>
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	059b      	lsls	r3, r3, #22
 8005ed6:	d4e1      	bmi.n	8005e9c <_fflush_r+0xc>
 8005ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eda:	f7ff fb8d 	bl	80055f8 <__retarget_lock_release_recursive>
 8005ede:	e7dd      	b.n	8005e9c <_fflush_r+0xc>

08005ee0 <__swhatbuf_r>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee8:	2900      	cmp	r1, #0
 8005eea:	b096      	sub	sp, #88	@ 0x58
 8005eec:	4615      	mov	r5, r2
 8005eee:	461e      	mov	r6, r3
 8005ef0:	da0d      	bge.n	8005f0e <__swhatbuf_r+0x2e>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ef8:	f04f 0100 	mov.w	r1, #0
 8005efc:	bf14      	ite	ne
 8005efe:	2340      	movne	r3, #64	@ 0x40
 8005f00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f04:	2000      	movs	r0, #0
 8005f06:	6031      	str	r1, [r6, #0]
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	b016      	add	sp, #88	@ 0x58
 8005f0c:	bd70      	pop	{r4, r5, r6, pc}
 8005f0e:	466a      	mov	r2, sp
 8005f10:	f000 f848 	bl	8005fa4 <_fstat_r>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	dbec      	blt.n	8005ef2 <__swhatbuf_r+0x12>
 8005f18:	9901      	ldr	r1, [sp, #4]
 8005f1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f22:	4259      	negs	r1, r3
 8005f24:	4159      	adcs	r1, r3
 8005f26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f2a:	e7eb      	b.n	8005f04 <__swhatbuf_r+0x24>

08005f2c <__smakebuf_r>:
 8005f2c:	898b      	ldrh	r3, [r1, #12]
 8005f2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f30:	079d      	lsls	r5, r3, #30
 8005f32:	4606      	mov	r6, r0
 8005f34:	460c      	mov	r4, r1
 8005f36:	d507      	bpl.n	8005f48 <__smakebuf_r+0x1c>
 8005f38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	6123      	str	r3, [r4, #16]
 8005f40:	2301      	movs	r3, #1
 8005f42:	6163      	str	r3, [r4, #20]
 8005f44:	b003      	add	sp, #12
 8005f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f48:	ab01      	add	r3, sp, #4
 8005f4a:	466a      	mov	r2, sp
 8005f4c:	f7ff ffc8 	bl	8005ee0 <__swhatbuf_r>
 8005f50:	9f00      	ldr	r7, [sp, #0]
 8005f52:	4605      	mov	r5, r0
 8005f54:	4639      	mov	r1, r7
 8005f56:	4630      	mov	r0, r6
 8005f58:	f7ff fbbc 	bl	80056d4 <_malloc_r>
 8005f5c:	b948      	cbnz	r0, 8005f72 <__smakebuf_r+0x46>
 8005f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f62:	059a      	lsls	r2, r3, #22
 8005f64:	d4ee      	bmi.n	8005f44 <__smakebuf_r+0x18>
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	f043 0302 	orr.w	r3, r3, #2
 8005f6e:	81a3      	strh	r3, [r4, #12]
 8005f70:	e7e2      	b.n	8005f38 <__smakebuf_r+0xc>
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	6020      	str	r0, [r4, #0]
 8005f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f7a:	81a3      	strh	r3, [r4, #12]
 8005f7c:	9b01      	ldr	r3, [sp, #4]
 8005f7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f82:	b15b      	cbz	r3, 8005f9c <__smakebuf_r+0x70>
 8005f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 f81d 	bl	8005fc8 <_isatty_r>
 8005f8e:	b128      	cbz	r0, 8005f9c <__smakebuf_r+0x70>
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	f043 0301 	orr.w	r3, r3, #1
 8005f9a:	81a3      	strh	r3, [r4, #12]
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	431d      	orrs	r5, r3
 8005fa0:	81a5      	strh	r5, [r4, #12]
 8005fa2:	e7cf      	b.n	8005f44 <__smakebuf_r+0x18>

08005fa4 <_fstat_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d07      	ldr	r5, [pc, #28]	@ (8005fc4 <_fstat_r+0x20>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	4611      	mov	r1, r2
 8005fb0:	602b      	str	r3, [r5, #0]
 8005fb2:	f7fa fe64 	bl	8000c7e <_fstat>
 8005fb6:	1c43      	adds	r3, r0, #1
 8005fb8:	d102      	bne.n	8005fc0 <_fstat_r+0x1c>
 8005fba:	682b      	ldr	r3, [r5, #0]
 8005fbc:	b103      	cbz	r3, 8005fc0 <_fstat_r+0x1c>
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
 8005fc2:	bf00      	nop
 8005fc4:	200002c0 	.word	0x200002c0

08005fc8 <_isatty_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d06      	ldr	r5, [pc, #24]	@ (8005fe4 <_isatty_r+0x1c>)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4604      	mov	r4, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	602b      	str	r3, [r5, #0]
 8005fd4:	f7fa fe63 	bl	8000c9e <_isatty>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_isatty_r+0x1a>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_isatty_r+0x1a>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	200002c0 	.word	0x200002c0

08005fe8 <_sbrk_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4d06      	ldr	r5, [pc, #24]	@ (8006004 <_sbrk_r+0x1c>)
 8005fec:	2300      	movs	r3, #0
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	f7fa fe6c 	bl	8000cd0 <_sbrk>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_sbrk_r+0x1a>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_sbrk_r+0x1a>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	200002c0 	.word	0x200002c0

08006008 <_init>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr

08006014 <_fini>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr
